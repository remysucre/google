/Users/remywang/daikon//java/utilMDE/WeakIdentityHashMap.java
for (Iterator<? extends Map.Entry<? extends K, ? extends V>> i = m.entrySet().iterator() ; i.hasNext() ;)
{
  Map.Entry<? extends K, ? extends V> e = i.next();
  put(e.getKey(), e.getValue());
}haha 
matches1
/Users/remywang/daikon//java/utilMDE/UtilMDE.java
for (Iterator itor = set.iterator() ; itor.hasNext() ;)
{
  Object elt = itor.next();
  if (key.equals(elt))
  {
    return elt;
  }
}haha 
matches1
/Users/remywang/daikon//java/daikon/inv/unary/scalar/Modulus.java
for (Iterator<Invariant> itor = ppt.invs.iterator() ; itor.hasNext() ;)
{
  Invariant inv = itor.next();
  if (inv instanceof Modulus)
    return (Modulus) inv;
}haha 
matches1
/Users/remywang/daikon//java/daikon/inv/Invariant.java
for (Iterator<Invariant> itor = ppt.invs.iterator() ; itor.hasNext() ;)
{
  Invariant inv = itor.next();
  if (inv.getClass() == invclass)
    return inv;
}haha 
matches1
/Users/remywang/daikon//java/daikon/inv/FeatureExtractor.java
for (Iterator<IntDoublePair> all = allFeatures.iterator() ; all.hasNext() ;)
{
  IntDoublePair current = all.next();
  if (numbersToNames.containsKey(current))
  {
    String currentName = numbersToNames.get(current);
    if (currentName.endsWith("Bool"))
      names.println((currentName + ":0.0, 1.0."));
    else
      if (currentName.endsWith("Float"))
        names.println((currentName + ": continuous."));
      else
        if (currentName.endsWith("Int"))
          names.println((currentName + ": continuous."));
        else
          throw new IOException("All feature names must end with one of " + "Float, Bool, or Int." + lineSep + "Error: " + currentName + lineSep);
  }
  else
    throw new IOException("Feature " + current.number + " not included in .names file");
}haha 
for (Iterator<IntDoublePair> j = allFets.iterator() ; j.hasNext() ;)
{
  IntDoublePair jguy = j.next();
  if (jguy.number == current.number)
    contains = true;
}haha 
for (Iterator<IntDoublePair> fets = allFets.iterator() ; fets.hasNext() ;)
{
  IntDoublePair fet = fets.next();
  output.print((df.format(fet.value) + ","));
}haha 
for (Iterator<IntDoublePair> fets = features.get(i).iterator() ; fets.hasNext() ;)
{
  IntDoublePair fet = fets.next();
  if (fet.value > THRESHOLD)
    output.print((fet.number + ":" + df.format(fet.value) + " "));
}haha 
for (Iterator<IntDoublePair> fets = features.get(i).iterator() ; fets.hasNext() ;)
{
  IntDoublePair fet = fets.next();
  output.print((fet.number + " " + df.format(fet.value) + " "));
}haha 
for (Iterator<IntDoublePair> it = getReflectFeatures(varInfos[i], lookup).iterator() ; it.hasNext() ;)
{
  IntDoublePair current = it.next();
  answer.add(new IntDoublePair((current.number + i + 1), current.value));
  answer.add(current);
}haha 
for (Iterator<IntDoublePair> iter = answer.iterator() ; iter.hasNext() ;)
{
  IntDoublePair current = iter.next();
  if (!index.contains(new Integer(current.number)))
    final_answer.add(current);
  index.add(new Integer(current.number));
}haha 
for (Iterator<String> i = neg.iterator() ; i.hasNext() ;)
{
  String vector = i.next();
  if (!pos.contains(vector))
  {
    if (type.equals("C5"))
      negvectors.add((vector + "bad"));
    else
      if (type.equals("SVMfu"))
        negvectors.add((vector + "-1"));
  }
}haha 
matches8
/Users/remywang/daikon//java/daikon/inv/Equality.java
for (Iterator<VarInfo> i = variables.iterator() ; i.hasNext() ;)
{
  VarInfo vi = i.next();
  if (debug.isLoggable(Level.FINE))
  {
    debug.fine(("  " + vi.name.name() + " [" + vi.comparability + "]"));
  }
  Assert.assertTrue((vi.ppt == leader.ppt));
  Assert.assertTrue(vi.comparableNWay(leader));
  Assert.assertTrue(VarComparability.comparable(leader, vi), ("not comparable " + leader.name.name() + " " + vi.name.name() + " at ppt " + ppt.parent.name()));
  Assert.assertTrue((vi.rep_type.isArray() == leader.rep_type.isArray()));
  vi.equalitySet = this;
}haha 
for (Iterator<VarInfo> i = vars.iterator() ; i.hasNext() ;)
{
  VarInfo var = i.next();
  if (!start)
  {
    result.append(" == ");
  }
  else
  {
    start = false;
  }
  result.append(var.name.name());
  result.append(("[" + var.varinfo_index + "]"));
  if (var == leader())
    result.append("L");
}haha 
for (Iterator<VarInfo> i = vars.iterator() ; i.hasNext() ;)
{
  VarInfo var = i.next();
  if (leader == var)
    continue;
  result.append("(").append(leaderName).append(" == ");
  result.append(var.name.name()).append(")");
  if (i.hasNext())
    result.append(" && ");
}haha 
for (Iterator<VarInfo> i = vars.iterator() ; i.hasNext() ;)
{
  VarInfo var = i.next();
  if (leader == var)
    continue;
  result.append(var.name.ioa_name());
  result.append(" = ");
  result.append(leaderName);
  if (i.hasNext())
    result.append(" /\\ ");
}haha 
for (Iterator<VarInfo> i = vars.iterator() ; i.hasNext() ;)
{
  VarInfo other = i.next();
  if (other.isDerivedSequenceMinMaxSum())
  {
    break;
  }
  if (other.isValidEscExpression())
  {
    valid_equiv.add(other);
  }
  else
  {
    invalid_equiv.add(other);
  }
}haha 
for (Iterator<VarInfo> i = vars.iterator() ; i.hasNext() ;)
{
  VarInfo var = i.next();
  if (leader == var)
    continue;
  if (leader.rep_type.isArray())
  {
    result.append("(").append("daikon.Quant.pairwiseEqual(");
    result.append(leaderName).append(", ").append(var.name.name_using(format, var));
    result.append(")");
  }
  else
  {
    if (leader.type.isFloat())
    {
      result.append("(").append(Invariant.formatFuzzy("eq", leader, var, format)).append(")");
    }
    else
    {
      if (leaderName.indexOf("daikon.Quant.collectObject") != -1 || var.name.name_using(format, var).indexOf("daikon.Quant.collectObject") != -1)
      {
        result.append(("(warning: it is meaningless to compare hashcodes for values " + "obtained through daikon.Quant.collect... methods."));
      }
      else
      {
        result.append("(").append(leaderName).append(" == ");
        result.append(var.name.name_using(format, var)).append(")");
      }
    }
  }
  if (i.hasNext())
    result.append(" && ");
}haha 
for (Iterator<VarInfo> iVars = vars.iterator() ; iVars.hasNext() ;)
{
  VarInfo var = iVars.next();
  if (newLeader == null)
  {
    newLeader = var;
  }
  else
    if (newLeader.isDerivedParamAndUninteresting() && !var.isDerivedParamAndUninteresting())
    {
      newLeader = var;
    }
    else
      if (var.isDerivedParamAndUninteresting() && !newLeader.isDerivedParamAndUninteresting())
      {
      }
      else
        if (var.derivedDepth() < newLeader.derivedDepth())
        {
          newLeader = var;
        }
        else
          if (var.derivedDepth() > newLeader.derivedDepth())
          {
          }
          else
            if (var.name.inOrderTraversal().size() < newLeader.name.inOrderTraversal().size())
            {
              newLeader = var;
            }
}haha 
for (Iterator<VarInfo> i = vars.iterator() ; i.hasNext() ;)
{
  VarInfo var = i.next();
  Assert.assertTrue(VarComparability.comparable(leader, var), ("not comparable: " + leader.name.name() + " " + var.name.name() + " at ppt " + ppt.parent.name()));
}haha 
matches8
/Users/remywang/daikon//java/daikon/inv/filter/InvariantFilters.java
for (Iterator<VariableFilter> iter = variableFilters.iterator() ; iter.hasNext() ;)
{
  InvariantFilter filter = iter.next();
  if (!filter.shouldDiscard(invariant))
  {
    hasAnyVariable = true;
  }
}haha 
for (Iterator<VariableFilter> iter = variableFilters.iterator() ; iter.hasNext() ;)
{
  InvariantFilter filter = iter.next();
  if (filter.shouldDiscard(invariant))
  {
    if (invariant.logOn())
      invariant.log(("Failed ALL_VARIABLES filter" + filter.getClass().getName()));
    return filter;
  }
}haha 
for (Iterator<InvariantFilter> iter = propertyFilters.iterator() ; iter.hasNext() ;)
{
  InvariantFilter filter = iter.next();
  if (invariant.logDetail() || df.isLoggable(Level.FINE))
  {
    invariant.log(df, ("applying " + filter.getClass().getName()));
  }
  if (filter.shouldDiscard(invariant))
  {
    if (invariant.logOn() || df.isLoggable(Level.FINE))
      invariant.log(df, ("failed " + filter.getClass().getName() + ": " + invariant.format()));
    return filter;
  }
}haha 
for (Iterator<InvariantFilter> iter = propertyFilters.iterator() ; iter.hasNext() ;)
{
  InvariantFilter filter = iter.next();
  if (filter.getDescription().equals(description))
  {
    answer = filter;
  }
}haha 
for (Iterator<InvariantFilter> iter = propertyFilters.iterator() ; iter.hasNext() ;)
{
  InvariantFilter filter = iter.next();
  filter.turnOn();
}haha 
for (Iterator<InvariantFilter> iter = propertyFilters.iterator() ; iter.hasNext() ;)
{
  InvariantFilter filter = iter.next();
  filter.turnOff();
}haha 
for (Iterator<VariableFilter> iter = variableFilters.iterator() ; iter.hasNext() ;)
{
  VariableFilter vf = iter.next();
  if (vf.getVariable().equals(variable))
  {
    return true;
  }
}haha 
for (Iterator<VariableFilter> iter = variableFilters.iterator() ; iter.hasNext() ;)
{
  VariableFilter vf = iter.next();
  if (vf.getVariable().equals(variable))
  {
    iter.remove();
    foundOnce = true;
  }
}haha 
matches8
/Users/remywang/daikon//java/daikon/tools/InvMatch.java
for (Iterator<List<InvTranslate>> i = valid_translations.iterator() ; i.hasNext() ;)
{
  List<InvTranslate> current_translation = i.next();
  Fmt.pf("  Translation: ");
  for (Iterator<InvTranslate> j = current_translation.iterator() ; j.hasNext() ;)
  {
    InvTranslate xlate = j.next();
    Fmt.pf("    %s", xlate);
  }
}haha 
for (Iterator<InvTranslate> j = current_translation.iterator() ; j.hasNext() ;)
{
  InvTranslate xlate = j.next();
  Fmt.pf("    %s", xlate);
}haha 
for (Iterator<InvTranslate> i = best_translation.iterator() ; i.hasNext() ;)
{
  InvTranslate xlate = i.next();
  Fmt.pf("  %s", xlate);
}haha 
for (Iterator<InvTranslate> j = inv_xlate_list.iterator() ; j.hasNext() ;)
{
  InvTranslate xlate = j.next();
  Fmt.pf("  %s", xlate);
}haha 
for (Iterator<InvTranslate> i = translation_list.iterator() ; i.hasNext() ;)
{
  InvTranslate xlate = i.next();
  if (xlate == null)
    continue;
  for (String key : xlate.var_map.keySet()) {
                                              String val = xlate.var_map.get(key);
                                              String cur_val = var_map.get(key);
                                              if (cur_val == null)
                                                var_map.put(key, val);
                                              else
                                                if (!cur_val.equals(val))
                                                  return false;
                                            }
}haha 
for (Iterator<InvTranslate> j = current_translation.iterator() ; j.hasNext() ;)
{
  InvTranslate xlate = j.next();
  if (xlate != null)
    quality += xlate.quality;
}haha 
matches6
/Users/remywang/daikon//java/daikon/tools/ExtractConsequent.java
for (Iterator<PptTopLevel> itor = ppts_sorted.iterator() ; itor.hasNext() ;)
{
  PptTopLevel ppt = itor.next();
  extract_consequent_maybe(ppt, ppts);
}haha 
matches1
/Users/remywang/daikon//java/daikon/PptTopLevel.java
for (Iterator<PptSplitter> ii = splitters.iterator() ; ii.hasNext() ;)
{
  PptSplitter ppt_split = ii.next();
  ppt_split.add_bottom_up(vt, count);
}haha 
for (Iterator<Invariant> j = slice.invs.iterator() ; j.hasNext() ;)
{
  Invariant inv = j.next();
  log.fine(("-- " + inv.format() + (NIS.is_suppressor(inv.getClass()) ? "[suppressor]" : "") + (inv.is_false() ? " [falsified]" : " ")));
}haha 
for (Iterator<PptSlice> itor = slices_vector.iterator() ; itor.hasNext() ;)
{
  PptSlice slice = itor.next();
  if (slice.invs.size() == 0)
  {
    itor.remove();
  }
}haha 
for (Iterator<Invariant> i = rm_list.iterator() ; i.hasNext() ;)
{
  Invariant inv = i.next();
  inv.ppt.removeInvariant(inv);
}haha 
for (Iterator<PptRelation> ii = children.iterator() ; ii.hasNext() ;)
{
  PptRelation rel = ii.next();
  if (rel.getRelationType() == PptRelation.EXIT_EXITNN)
    exit_points.add(rel.child);
}haha 
for (Iterator<PptSlice> iPivoted = pivoted.iterator() ; iPivoted.hasNext() ;)
{
  PptSlice oPivoted = iPivoted.next();
  addSlice(oPivoted);
  if (debugEqualTo.isLoggable(Level.FINE))
  {
    debugEqualTo.fine(("  Readded: " + oPivoted));
  }
}haha 
for (Iterator<Invariant> _invs = all.iterator() ; _invs.hasNext() ;)
{
  Invariant inv = _invs.next();
  if (test.include(inv))
  {
    String fmt = inv.format_using(OutputFormat.SIMPLIFY);
    if (!format_simplify_problem(fmt))
    {
      printing.add(inv);
    }
  }
}haha 
for (Iterator<PptSlice> i = viewsAsCollection().iterator() ; i.hasNext() ;)
{
  PptSlice slice = i.next();
  slice.repCheck();
}haha 
for (Iterator<PptSlice> i = viewsAsCollection().iterator() ; i.hasNext() ;)
{
  PptSlice slice = i.next();
  result.append((Global.lineSep + slice.toString()));
}haha 
for (Iterator<VarInfo> j = vars.iterator() ; j.hasNext() ;)
{
  VarInfo v = j.next();
  if (set_str != "")
    set_str += ",";
  set_str += v.name.name();
  if (v.missingOutOfBounds())
    set_str += "{MOB}";
}haha 
for (Iterator<PptRelation> i = parents.iterator() ; i.hasNext() ;)
{
  PptRelation rel = i.next();
  if (rel.parentVar(v) != null)
    return true;
}haha 
for (Iterator<PptRelation> i = children.iterator() ; i.hasNext() ;)
{
  PptRelation rel = i.next();
  if (!rel.child.in_merge)
    rel.child.mergeInvs();
}haha 
for (Iterator<PptRelation> i = children.iterator() ; i.hasNext() ;)
{
  PptRelation rel = i.next();
  rel.child.remove_child_invs(rel);
}haha 
for (Iterator<PptRelation> i = children.iterator() ; i.hasNext() ;)
{
  PptRelation rel = i.next();
  rel.child.parents.remove(rel);
}haha 
for (Iterator<PptRelation> i = children.iterator() ; i.hasNext() ;)
{
  PptRelation crel = i.next();
  if (!crel.child.invariants_removed)
  {
    return;
  }
}haha 
for (Iterator<PptSlice> i = slices_to_remove.iterator() ; i.hasNext() ;)
{
  PptSlice slice = i.next();
  removeSlice(slice);
}haha 
matches16
/Users/remywang/daikon//java/daikon/tools/runtimechecker/InstrumentVisitor.java
for (Iterator<Invariant> invI = invList.iterator() ; invI.hasNext() ;)
{
  Invariant inv = invI.next();
  xmlStringToIndex.put(toProperty(inv).xmlString(), Integer.toString(varNumCounter));
  varNumCounter++;
}haha 
for (Iterator<FormalParameter> i = Ast.getParametersNoImplicit(ctor).iterator() ; i.hasNext() ;)
{
  FormalParameter param = i.next();
  parameters.add(Ast.getName(param));
  typesAndParameters.add(Ast.format(param));
}haha 
for (Iterator<FormalParameter> i = Ast.getParameters(method).iterator() ; i.hasNext() ;)
{
  FormalParameter param = i.next();
  parameters.add(Ast.getName(param));
  typesAndParameters.add(Ast.format(param));
}haha 
for (Iterator<Invariant> i = invariants.iterator() ; i.hasNext() ;)
{
  Invariant inv = i.next();
  if (!inv.isValidExpression(OutputFormat.JAVA))
  {
    continue;
  }
  if (inv instanceof FunctionBinary)
  {
    FunctionBinary fb = (FunctionBinary) inv;
    if (fb.isLshift() || fb.isRshiftSigned() || fb.isRshiftUnsigned())
    {
      continue;
    }
  }
  if (outputOnlyHighConfInvariants)
  {
    if (toProperty(inv).calculateConfidence() < 0.5)
    {
      continue;
    }
  }
  survivors.add(inv);
}haha 
for (Iterator<PptTopLevel> i = matching_ppts.iterator() ; i.hasNext() ;)
{
  PptTopLevel ppt = i.next();
  if (ppt.ppt_name.isExitPoint() && ppt.ppt_name.isCombinedExitPoint())
  {
    List<Invariant> postconditions = filterInvariants(Ast.getInvariants(ppt, pptmap));
    appendInvariantChecks(postconditions, code, "daikon.tools.runtimechecker.Violation.Time.onExit");
  }
}haha 
for (Iterator<PptTopLevel> i = matching_ppts.iterator() ; i.hasNext() ;)
{
  PptTopLevel ppt = i.next();
  if (ppt.ppt_name.isEnterPoint())
  {
    List<Invariant> preconditions = filterInvariants(Ast.getInvariants(ppt, pptmap));
    appendInvariantChecks(preconditions, code, "daikon.tools.runtimechecker.Violation.Time.onEntry");
  }
}haha 
for (Iterator<PptTopLevel> i = matching_ppts.iterator() ; i.hasNext() ;)
{
  PptTopLevel ppt = i.next();
  if (ppt.ppt_name.isEnterPoint())
  {
    List<Invariant> preconditions = filterInvariants(Ast.getInvariants(ppt, pptmap));
    List<InvProp> finalList = null;
    if (majorProperties)
    {
      finalList = getMajor(preconditions);
    }
    else
    {
      finalList = getMinor(preconditions);
    }
    appendInvariantChecks_checker(finalList, code);
  }
}haha 
for (Iterator<PptTopLevel> i = matching_ppts.iterator() ; i.hasNext() ;)
{
  PptTopLevel ppt = i.next();
  if (ppt.ppt_name.isExitPoint() && ppt.ppt_name.isCombinedExitPoint())
  {
    List<Invariant> postconditions = filterInvariants(Ast.getInvariants(ppt, pptmap));
    List<InvProp> finalList = null;
    if (majorProperties)
    {
      finalList = getMajor(postconditions);
    }
    else
    {
      finalList = getMinor(postconditions);
    }
    appendInvariantChecks_checker(finalList, code);
  }
}haha 
for (Iterator<PptTopLevel> i = matching_ppts.iterator() ; i.hasNext() ;)
{
  PptTopLevel ppt = i.next();
  if (ppt.ppt_name.isEnterPoint())
  {
    List<Invariant> preconditions = filterInvariants(Ast.getInvariants(ppt, pptmap));
    List<InvProp> finalList = null;
    if (majorProperties)
    {
      finalList = getMajor(preconditions);
    }
    else
    {
      finalList = getMinor(preconditions);
    }
    appendInvariantChecks_checker(finalList, code);
  }
}haha 
for (Iterator<PptTopLevel> i = matching_ppts.iterator() ; i.hasNext() ;)
{
  PptTopLevel ppt = i.next();
  if (ppt.ppt_name.isExitPoint() && ppt.ppt_name.isCombinedExitPoint())
  {
    List<Invariant> postconditions = filterInvariants(Ast.getInvariants(ppt, pptmap));
    List<InvProp> finalList = null;
    if (majorProperties)
    {
      finalList = getMajor(postconditions);
    }
    else
    {
      finalList = getMinor(postconditions);
    }
    appendInvariantChecks_checker(finalList, code);
  }
}haha 
matches10
/Users/remywang/daikon//java/daikon/tools/jtb/InstrumentObserversVisitor.java
for (Iterator<FormalParameter> i = Ast.getParameters(method).iterator() ; i.hasNext() ;)
{
  FormalParameter param = i.next();
  parameters.add(Ast.getName(param));
}haha 
matches1
/Users/remywang/daikon//java/daikon/test/SampleTester.java
for (Iterator<Invariant> i = slice.invs.iterator() ; i.hasNext() ;)
{
  Invariant inv = i.next();
  if (inv.getClass() == cls)
    return true;
  if (format != null && format.equals(inv.format()))
    return true;
  debug.fine(Fmt.spf("trace %s: '%s'", inv.getClass(), inv.format()));
}haha 
for (Iterator<Invariant> i = slice.invs.iterator() ; i.hasNext() ;)
{
  Invariant inv = i.next();
  Fmt.pf("found %s: %s", inv.getClass(), inv.format());
}haha 
matches2
/Users/remywang/daikon//java/daikon/DynamicConstants.java
for (Iterator<Invariant> j = slice.invs.iterator() ; j.hasNext() ;)
{
  Invariant inv = j.next();
  if (inv.is_false())
  {
    j.remove();
  }
}haha 
matches1
/Users/remywang/daikon//java/daikon/diff/MatchCountVisitor2.java
for (Iterator<String> i = cnt.iterator() ; i.hasNext() ;)
{
  String elem = i.next();
  if (targSet.contains(elem))
    correctSet.add(elem);
}haha 
for (Iterator<String> i = targSet.iterator() ; i.hasNext() ;)
{
  String str = i.next();
  if (correctSet.contains(str))
  {
    System.out.println(str);
  }
}haha 
for (Iterator<String> i = targSet.iterator() ; i.hasNext() ;)
{
  String str = i.next();
  if (!correctSet.contains(str))
  {
    System.out.println(str);
  }
}haha 
for (Iterator<String> i = cnt.iterator() ; i.hasNext() ;)
{
  String str = i.next();
  if (!correctSet.contains(str))
  {
    System.out.println(str);
  }
}haha 
matches4
/Users/remywang/daikon//java/daikon/diff/PptCountVisitor.java
for (Iterator<String> i = targSet.iterator() ; i.hasNext() ;)
{
  String str = i.next();
  if (correctSet.contains(str))
  {
    System.out.println(str);
  }
}haha 
for (Iterator<String> i = targSet.iterator() ; i.hasNext() ;)
{
  String str = i.next();
  if (!correctSet.contains(str))
  {
    System.out.println(str);
  }
}haha 
for (Iterator<String> i = incorrectSet.iterator() ; i.hasNext() ;)
{
  String str = i.next();
  System.out.println(str);
}haha 
matches3
/Users/remywang/daikon//java/daikon/diff/InvMap.java
for (Iterator<Invariant> i2 = invs.iterator() ; i2.hasNext() ;)
{
  Invariant inv = i2.next();
  result += "  " + inv.format() + Global.lineSep;
}haha 
matches1
/Users/remywang/daikon//java/daikon/diff/MultiDiffVisitor.java
for (Iterator<String> i = programPointsList.iterator() ; i.hasNext() ;)
{
  String key = i.next();
  lastMap.put(key, new ArrayList<String>());
}haha 
for (Iterator<String> i = programPointsList.iterator() ; i.hasNext() ;)
{
  String key = i.next();
  lastMap.put(key, new ArrayList<String>());
}haha 
matches2
/Users/remywang/daikon//java/daikon/diff/Diff.java
for (Iterator<Invariant> j = invs1.iterator() ; j.hasNext() ;)
{
  Invariant inv = j.next();
  if (inv instanceof Implication)
  {
    Implication imp = (Implication) inv;
    if (!repeatFilter.contains(imp.consequent().format_using(OutputFormat.JAVA)))
    {
      repeatFilter.add(imp.consequent().format_using(OutputFormat.JAVA));
      ret.add(imp.consequent());
    }
    if (imp.iff == true)
    {
      if (!repeatFilter.contains(imp.predicate().format()))
      {
        repeatFilter.add(imp.predicate().format());
        ret.add(imp.predicate());
      }
    }
  }
  else
  {
    ret.add(inv);
  }
}haha 
for (Iterator<String> i = manip.nameStringSet().iterator() ; i.hasNext() ;)
{
  String somePptName = i.next();
  if (targ.equals(somePptName))
  {
    PptTopLevel repl = manip.get(somePptName);
    return repl.getInvariants();
  }
}haha 
for (Iterator<String> i = manip.nameStringSet().iterator() ; i.hasNext() ;)
{
  String somePptName = i.next();
  if (targetName.equals(somePptName))
  {
    PptTopLevel repl = manip.get(somePptName);
    return UtilMDE.sortList(repl.getInvariants(), PptTopLevel.icfp);
  }
}haha 
matches3
/Users/remywang/daikon//java/daikon/FileIO.java
for (Iterator<Invocation> i = invocations.iterator() ; i.hasNext() ;)
{
  Invocation invok = i.next();
  System.out.println(invok.format());
}haha 
for (Iterator<Invocation> i = invocations.iterator() ; i.hasNext() ;)
{
  Invocation invok = i.next();
  invok = invok.canonicalize();
  if (counter.containsKey(invok))
  {
    Integer oldCount = counter.get(invok);
    Integer newCount = new Integer(oldCount.intValue() + 1);
    counter.put(invok, newCount);
  }
  else
  {
    counter.put(invok, new Integer(1));
  }
}haha 
matches2
/Users/remywang/daikon//java/daikon/PrintInvariants.java
for (Iterator<Invariant> ii = ppt.joiner_view.invs.iterator() ; ii.hasNext() ;)
{
  Invariant inv = ii.next();
  PptSplitter.debug.fine(("-- " + inv.format()));
}haha 
for (Iterator<Invariant> ii = slice.invs.iterator() ; ii.hasNext() ;)
{
  Invariant inv = ii.next();
  if (inv.getClass().getName().indexOf("Ternary") > 0)
  {
    lt_cnt++;
  }
}haha 
for (Iterator<Invariant> ii = slice.invs.iterator() ; ii.hasNext() ;)
{
  Invariant inv = ii.next();
  Fmt.pf("%s%s [%s]", indent, inv.format(), UtilMDE.unqualified_name(inv.getClass()));
}haha 
matches3
/Users/remywang/daikon//java/daikon/chicory/StringInfo.java
for (Iterator<String> iter = theValues.iterator() ; iter.hasNext() ;)
{
  Object str = iter.next();
  if (str == null)
    buf.append(str);
  else
    if (str instanceof NonsensicalObject || str instanceof NonsensicalList)
      buf.append("nonsensical");
    else
      buf.append(("\"" + encodeString(((String) str)) + "\""));
  if (iter.hasNext())
    buf.append(" ");
}haha 
matches1

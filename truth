156 changes
+            for (int i = 0; i < 100; i++)
+    for (Iterator<Invocation> i = invocations.iterator(); i.hasNext();) {
+    for (Iterator<Invocation> i = invocations.iterator(); i.hasNext();) {
+          for (Iterator<Invariant> j = inv_list.iterator(); j.hasNext();) {
+    for (Iterator<PptTopLevel> iPpt = ppts.iterator(); iPpt.hasNext(); ) {
+    for (Iterator<PptTopLevel> i = nameToPpt.values().iterator(); i.hasNext(); ) {
+          for (Iterator<PptSplitter> kk = rel.child.splitters.iterator(); kk.hasNext();) {
+        for (Iterator<SplitChild> jj = split_children.iterator(); jj.hasNext();) {
+    for (Iterator<Invariant> overInvs = invs.iterator(); overInvs.hasNext(); ) {
+    for (Iterator<Invariant> i = invs.iterator(); i.hasNext(); ) {
+    for (Iterator<Invariant> i = invs.iterator(); i.hasNext(); ) {
+    for (Iterator<Invariant> i = invs.iterator(); i.hasNext(); ) {
+    for (Iterator<Invariant> i = invs.iterator(); i.hasNext(); ) {
+    for (Iterator<Invariant> i = Daikon.proto_invs.iterator(); i.hasNext(); ) {
+    for (Iterator<Invariant> i = invs.iterator(); i.hasNext(); ) {
+    for (Iterator<List<Invariant>> j = inv_map.values().iterator(); j.hasNext(); ) {
+    for (Iterator<List<VarInfo>> i = multiMap.values().iterator(); i.hasNext(); ) {
+    for (Iterator<VarInfo.Pair> i = eset.iterator(); i.hasNext(); ) {
+        for (Iterator<Equality> iNewInvs = newInvs.iterator(); iNewInvs.hasNext(); ) {
+    for (Iterator<VarInfo> i = vis.iterator(); i.hasNext(); ) {
+        for (Iterator<Invariant> j = slice.invs.iterator(); j.hasNext(); ) {
+    for (Iterator<PptSlice> itor = newSlices.iterator(); itor.hasNext(); ) {
+    for (Iterator<Invariant> i = invs.iterator(); i.hasNext(); ) {
+    for (Iterator<VarInfo[]> itor = slices.iterator(); itor.hasNext(); ) {
+      for (Iterator<Invariant[]> i = exclusive_invs_vec.iterator(); i.hasNext(); ) {
+        for (Iterator<Invariant[]> jj = exclusive_invs_vec.iterator(); jj.hasNext(); ) {
+        for (Iterator<Invariant[]> jj = exclusive_invs_vec.iterator(); jj.hasNext(); ) {
+    for (Iterator<Invariant[]> ii = exclusive_invs_vec.iterator(); ii.hasNext(); ) {
+      for (Iterator<PptSplitter> ii = splitters.iterator(); ii.hasNext();) {
+      for (Iterator<Invariant> j = slice.invs.iterator(); j.hasNext();) {
+    for (Iterator<Invariant> i = rm_list.iterator(); i.hasNext();) {
+      for (Iterator<PptRelation> ii = children.iterator(); ii.hasNext();) {
+    for (Iterator<PptSlice> iPivoted = pivoted.iterator(); iPivoted.hasNext();) {
+    for (Iterator<PptTopLevel> ppts = closure.iterator(); ppts.hasNext();) {
+    for (Iterator<PptSlice> i = viewsAsCollection().iterator(); i.hasNext();) {
+    for (Iterator<PptSlice> i = viewsAsCollection().iterator(); i.hasNext();) {
+      for (Iterator<VarInfo> j = vars.iterator(); j.hasNext();) {
+    for (Iterator<PptRelation> i = parents.iterator(); i.hasNext();) {
+    for (Iterator<PptRelation> i = children.iterator(); i.hasNext();) {
+      for (Iterator<VarInfo.Pair> j = emap.keySet().iterator(); j.hasNext();) {
+      for (Iterator<PptRelation> i = children.iterator(); i.hasNext();) {
+      for (Iterator<PptRelation> i = children.iterator(); i.hasNext();) {
+        for (Iterator<VarInfo> k = pv.equalitySet.getVars().iterator(); k.hasNext();) {
+    for (Iterator<PptRelation> i = children.iterator(); i.hasNext();) {
+    for (Iterator<PptSlice> i = slices_to_remove.iterator(); i.hasNext(); ) {
+      for (Iterator<Invariant> ii = ppt.joiner_view.invs.iterator(); ii.hasNext(); ) {
+        for (Iterator<Invariant> ii = slice.invs.iterator(); ii.hasNext(); ) {
+        for (Iterator<Invariant> ii = slice.invs.iterator(); ii.hasNext(); ) {
+    for (Iterator<Invariant> ii = slice.invs.iterator(); ii.hasNext(); ) {
+    for (Iterator<VarInfoName> i = name.inOrderTraversal().iterator(); i.hasNext();) {
+      for (Iterator<VarInfoName> i = o.args.iterator(); i.hasNext(); ) {
+      for (Iterator<VarInfoName> i = o.args.iterator(); i.hasNext(); ) {
+      for (Iterator<VarInfoName> i = o.args.iterator(); i.hasNext(); ) {
+      for (Iterator<VarInfoName> i = o.args.iterator(); i.hasNext(); ) {
+      for (Iterator<VarInfoName> i = o.args.iterator(); i.hasNext(); ) {
+    for (Iterator<PptTopLevel> i = ppts.iterator(); i.hasNext(); ) {
+      for (Iterator<Invariant> j = invs1.iterator(); j.hasNext(); ) {
+      for (Iterator<Invariant> i2 = invs.iterator(); i2.hasNext(); ) {
+    for (Iterator<String> i = cnt.iterator(); i.hasNext(); ) {
+    for (Iterator<String> i = targSet.iterator(); i.hasNext(); ) {
+    for (Iterator<String> i = targSet.iterator(); i.hasNext(); ) {
+    for (Iterator<String> i = cnt.iterator(); i.hasNext(); ) {
+        for (Iterator<String> i = programPointsList.iterator(); i.hasNext(); ) {
+        for (Iterator<String> i = programPointsList.iterator(); i.hasNext(); ) {
+    for (Iterator<String> i = targSet.iterator(); i.hasNext(); ) {
+    for (Iterator<String> i = targSet.iterator(); i.hasNext(); ) {
+    for (Iterator<String> i = incorrectSet.iterator(); i.hasNext(); ) {
+    for (Iterator<Invariant> iter = allInvariants.iterator(); iter.hasNext(); ) {
+    for (Iterator<String> iter = (new TreeSet<String>(pptMap.nameStringSet())).iterator(); iter.hasNext(); ) {
+    for (Iterator<String> iter = (new TreeSet<String>(pptMap.nameStringSet())).iterator(); iter.hasNext(); ) {
+    for (Iterator<String> iter = pptMap.nameStringSet().iterator(); iter.hasNext(); ) {
+    for (Iterator<VarInfo> i = variables.iterator(); i.hasNext(); ) {
+    for (Iterator<VarInfo> i = vars.iterator(); i.hasNext(); ) {
+    for (Iterator<VarInfo> i = vars.iterator(); i.hasNext(); ) {
+      for (Iterator<VarInfo> i = vars.iterator(); i.hasNext(); ) {
+      for (Iterator<VarInfo> i = vars.iterator(); i.hasNext(); ) {
+    for (Iterator<VarInfo> iVars = vars.iterator(); iVars.hasNext(); ) {
+    for (Iterator<VarInfo> i = vars.iterator(); i.hasNext(); ) {
+      for (Iterator<IntDoublePair> h = allFeatures.iterator(); h.hasNext();) {
+        for (Iterator<IntDoublePair> j = allFets.iterator(); j.hasNext();) {
+      for (Iterator<IntDoublePair> fets = allFets.iterator(); fets.hasNext(); ) {
+    for (Iterator<IntDoublePair> iter = answer.iterator(); iter.hasNext();) {
+      for (Iterator<String> i = neg.iterator(); i.hasNext(); ) {
+      for (Iterator<VarInfo> iter = all_vars1.iterator(); iter.hasNext(); ) {
+      for (Iterator<VarInfo> iter = all_vars2.iterator(); iter.hasNext(); ) {
+    for (Iterator<Invariant> itor = ppt.invs.iterator(); itor.hasNext(); ) {
+    for (Iterator<Invariant> itor = ppt.invs.iterator(); itor.hasNext(); ) {
+    for (Iterator<Invariant> itor = ppt.invs.iterator(); itor.hasNext(); ) {
+    for (Iterator<Invariant> itor = ppt.invs.iterator(); itor.hasNext(); ) {
+    for (Iterator<Invariant> itor = ppt.invs.iterator(); itor.hasNext(); ) {
+    for (Iterator<Invariant> itor = ppt.invs.iterator(); itor.hasNext(); ) {
+    for (Iterator<Invariant> itor = ppt.invs.iterator(); itor.hasNext(); ) {
+    for (Iterator<Invariant> itor = ppt.invs.iterator(); itor.hasNext(); ) {
+    for (Iterator<InvariantFilter> iter = propertyFilters.iterator(); iter.hasNext(); ) {
+    for (Iterator<InvariantFilter> iter = propertyFilters.iterator(); iter.hasNext(); ) {
+    for (Iterator<InvariantFilter> iter = propertyFilters.iterator(); iter.hasNext(); ) {
+    for (Iterator<InvariantFilter> iter = propertyFilters.iterator(); iter.hasNext(); ) {
+    for (Iterator<VariableFilter> iter = variableFilters.iterator(); iter.hasNext(); ) {
+    for (Iterator<Invariant> itor = ppt.invs.iterator(); itor.hasNext(); ) {
+    for (Iterator<Invariant> itor = ppt.invs.iterator(); itor.hasNext(); ) {
+    for (Iterator<Invariant> itor = ppt.invs.iterator(); itor.hasNext(); ) {
+    for (Iterator<Invariant> itor = ppt.invs.iterator(); itor.hasNext(); ) {
+    for (Iterator<Invariant> itor = ppt.invs.iterator(); itor.hasNext(); ) {
+    for (Iterator<Invariant> itor = ppt.invs.iterator(); itor.hasNext(); ) {
+    for (Iterator<Invariant> itor = ppt.invs.iterator(); itor.hasNext(); ) {
+    for (Iterator<File> i = files.iterator(); i.hasNext(); ) {
+    for (Iterator<SpinfoFileParser> spi = splitters.iterator(); spi.hasNext(); ) {
+    for (Iterator<Invariant> i = Daikon.proto_invs.iterator(); i.hasNext(); ) {
+    for (Iterator<NISuppressionSet> i = all_suppressions.iterator(); i.hasNext(); ) {
+    for (Iterator<List<NISuppressionSet>> i = suppressor_map.values().iterator(); i.hasNext(); ) {
+      for (Iterator<NISuppressionSet> j = ss_list.iterator(); j.hasNext(); ) {
+        for (Iterator<NISuppressionSet> k = suppressor_ss_list.iterator(); k.hasNext(); ) {
+    for (Iterator<NISuppressionSet> i = ss_list.iterator(); i.hasNext(); ) {
+    for (Iterator<Invariant> i = new_invs.iterator(); i.hasNext(); ) {
+      for (Iterator<Antecedents> i = comp_ants.values().iterator(); i.hasNext(); ) {
+      for (Iterator<Antecedents> i = comp_ants.values().iterator(); i.hasNext(); ) {
+      for (Iterator<Antecedents> i = comp_ants.values().iterator(); i.hasNext(); ) {
+    for (Iterator<NISuppressionSet> i = all_suppressions.iterator(); i.hasNext(); ) {
+      for (Iterator<NISuppression> j = ss.iterator(); j.hasNext(); ) {
+        for (Iterator<Antecedents> k = comp_ants.values().iterator(); k.hasNext(); ) {
+    for (Iterator<SupInv> i = unsuppressed_invs.iterator(); i.hasNext(); ) {
+      for (Iterator<Antecedents> i = comp_ants.values().iterator(); i.hasNext(); ) {
+    for (Iterator<NISuppressionSet> i = all_suppressions.iterator(); i.hasNext(); ) {
+      for (Iterator<NISuppression> j = ss.iterator(); j.hasNext(); ) {
+        for (Iterator<Antecedents> k = comp_ants.values().iterator(); k.hasNext(); ) {
+    for (Iterator<SupInv> i = suppressed_invs.iterator(); i.hasNext(); ) {
+      for (Iterator<Invariant> j = slice.invs.iterator(); j.hasNext(); ) {
+      for (Iterator<Invariant> j = slice.invs.iterator(); j.hasNext(); ) {
+      for (Iterator<List<Invariant>> i = ants.antecedent_map.values().iterator(); i.hasNext();) {
+        for (Iterator<Invariant> j = invs.iterator(); j.hasNext(); ) {
+        for (Iterator<Invariant> j = ilist.iterator(); j.hasNext(); ) {
+      for (Iterator<Invariant> j = a.iterator(); j.hasNext(); ) {
+    for (Iterator<Invariant> i = antecedents[idx].iterator(); i.hasNext(); ) {
+          for (Iterator<NIS.SupInv> j = new_invs.iterator(); j.hasNext(); ) {
+    for (Iterator<Invariant> i = antecedents[idx].iterator(); i.hasNext(); ) {
+          for (Iterator<NIS.SupInv> j = new_invs.iterator(); j.hasNext(); ) {
+      for (Iterator<Invariant> j = antecedents[i].iterator(); j.hasNext(); ) {
+      for (Iterator<Invariant> i = new_invs.iterator(); i.hasNext(); ) {
+        for (Iterator<Invariant> i = slice.invs.iterator(); i.hasNext(); ) {
+        for (Iterator<Invariant> i = slice.invs.iterator(); i.hasNext(); ) {
+    for (Iterator<Invariant> i = slice.invs.iterator(); i.hasNext(); ) {
+    for (Iterator<Invariant> i = slice.invs.iterator(); i.hasNext(); ) {
+    for (Iterator<String> i = args.iterator(); i.hasNext(); ) {
+    for (Iterator<List<InvTranslate>> i = valid_translations.iterator(); i.hasNext(); ) {
+      for (Iterator<InvTranslate> j = current_translation.iterator(); j.hasNext(); ) {
+    for (Iterator<InvTranslate> i = best_translation.iterator(); i.hasNext(); ) {
+      for (Iterator<List<InvTranslate>> i = xlate_list.iterator(); i.hasNext(); ) {
+        for (Iterator<InvTranslate> j = inv_xlate_list.iterator(); j.hasNext(); ) {
+    for (Iterator<InvTranslate> i = inv_xlate_list.iterator(); i.hasNext(); ) {
+    for (Iterator<InvTranslate> i = translation_list.iterator(); i.hasNext(); ) {
+    for (Iterator<List<InvTranslate>> i = valid_translations.iterator(); i.hasNext(); ) {
+      for (Iterator<InvTranslate> j = current_translation.iterator(); j.hasNext(); ) {
+        for (Iterator<PptSplitter> ii = ppt.splitters.iterator(); ii.hasNext(); ) {
+        for (Iterator<Invariant> j = slice.invs.iterator(); j.hasNext(); ) {
+    for (Iterator<PptTopLevel> itor = matching_ppts.iterator(); itor.hasNext(); ) {
+    for (Iterator<String> i = annoStrings.iterator(); i.hasNext();) {
+    for (Iterator<MethodDeclaration> i = observer_methods.iterator(); i.hasNext(); ) {
+    for (Iterator<MethodDeclaration> i = observer_methods.iterator(); i.hasNext(); ) {
+    for (Iterator<FormalParameter> i = Ast.getParameters(method).iterator(); i.hasNext(); ) {
+    for (Iterator<String> i = javaFileNames.iterator(); i.hasNext();) {
+        for (Iterator<ParseResults> i = parseResults.iterator(); i.hasNext();) {
+        for (Iterator<FormalParameter> i = Ast.getParametersNoImplicit(ctor).iterator(); i.hasNext();) {
+        for (Iterator<FormalParameter> i = Ast.getParameters(method).iterator(); i.hasNext();) {
+        for (Iterator<Invariant> i = invs.iterator(); i.hasNext();) {
+        for (Iterator<Invariant> i = invariants.iterator(); i.hasNext();) {
+        for (Iterator<PptTopLevel> i = matching_ppts.iterator(); i.hasNext();) {
+        for (Iterator<PptTopLevel> i = matching_ppts.iterator(); i.hasNext();) {
+        for (Iterator<PptTopLevel> i = matching_ppts.iterator(); i.hasNext();) {
+        for (Iterator<PptTopLevel> i = matching_ppts.iterator(); i.hasNext();) {
+        for (Iterator<PptTopLevel> i = matching_ppts.iterator(); i.hasNext();) {
+        for (Iterator<PptTopLevel> i = matching_ppts.iterator(); i.hasNext();) {
+        for (Iterator<String> i = annoStrings.iterator(); i.hasNext();) {
+    for (Iterator<LIMITEDSIZEINTSET> itor = slist.iterator(); itor.hasNext(); ) {

#if 0
  // Do not attempt to compile this file with a Java compiler such as javac.
  // You first need to preprocess it with cpp, the C preprocessor.
  // The correct way to build the system is to run 'make'.
#endif

#if (defined(EQUAL) || defined(NONEQUAL) || defined(LESSTHAN) || defined(LESSEQUAL) || defined(GREATERTHAN) || defined(GREATEREQUAL))
  #define SUPERCLASS SingleScalarSequence
  #define PRIMITIVE long
  #define ELEMENTISTYPE elementIsIntegral()
  #define ASSERTYPE INT_ARRAY
  #define BASEISTYPE baseIsIntegral
  #define SEQ_INDEX_LESSTHAN SeqIndexIntLessThan
  #define SEQ_INDEX_GREATERTHAN SeqIndexIntGreaterThan
  #define SEQ_INDEX_EQUAL SeqIndexIntEqual
  #define VALUE_SET ValueSet.ValueSetScalarArray
  #define SUBSEQUENCE SubSequence
#elif defined(EQUALFLOAT) || defined(NONEQUALFLOAT) || defined(LESSTHANFLOAT) || defined(LESSEQUALFLOAT) || defined(GREATERTHANFLOAT) || defined(GREATEREQUALFLOAT)
  #define SUPERCLASS SingleFloatSequence
  #define PRIMITIVE double
  #define ELEMENTISTYPE elementIsFloat()
  #define ASSERTYPE DOUBLE_ARRAY
  #define BASEISTYPE baseIsFloat
  #define SEQ_INDEX_LESSTHAN SeqIndexFloatLessThan
  #define SEQ_INDEX_GREATERTHAN SeqIndexFloatGreaterThan
  #define SEQ_INDEX_EQUAL SeqIndexFloatEqual
  #define VALUE_SET ValueSet.ValueSetFloatArray
  #define SUBSEQUENCE SubSequenceFloat
#endif

#define STRING(foo) #foo

#if defined(EQUAL)
  #define CLASSNAME SeqIndexIntEqual
  #define EQUALS(a,b) (a == b)
  #define COMPARE ==
  #define SYMMETRIC_OP
  #define EQUALSstring "=="
  #define EQUALSIOAstring "="
  #define EQUALSSIMPLIFYstring "EQ"
  #define EQUALSQUANTstring "Equal"
#elif defined(EQUALFLOAT)
  #define CLASSNAME SeqIndexFloatEqual
  #define EQUALS(a,b) (Global.fuzzy.eq (a, b))
  #define COMPARE ==
  #define SYMMETRIC_OP
  #define EQUALSstring "=="
  #define EQUALSIOAstring "="
  #define EQUALSSIMPLIFYstring "EQ"
  #define EQUALSQUANTstring "Equal"
#elif defined(NONEQUAL)
  #define CLASSNAME SeqIndexIntNonEqual
  #define EQUALS(a,b) (a != b)
  #define COMPARE !=
  #define SYMMETRIC_OP
  #define EQUALSstring "!="
  #define EQUALSIOAstring "~="
  #define EQUALSSIMPLIFYstring "NEQ"
  #define EQUALSQUANTstring "NotEqual"
#elif defined(NONEQUALFLOAT)
  #define CLASSNAME SeqIndexFloatNonEqual
  #define EQUALS(a,b) (Global.fuzzy.ne (a, b))
  #define COMPARE !=
  #define SYMMETRIC_OP
  #define EQUALSstring "!="
  #define EQUALSIOAstring "~="
  #define EQUALSSIMPLIFYstring "NEQ"
  #define EQUALSQUANTstring "NotEqual"
#elif defined(LESSTHAN)
  #define CLASSNAME SeqIndexIntLessThan
  #define CLASS_SWAP SeqIndexIntGreaterThan
  #define EQUALS(a,b) (a < b)
  #define COMPARE <
  #define EQUALSstring "<"
  #define EQUALSIOAstring "<"
  #define EQUALSSIMPLIFYstring "<"
  #define EQUALSQUANTstring "Lt"
#elif defined(LESSTHANFLOAT)
  #define CLASSNAME SeqIndexFloatLessThan
  #define CLASS_SWAP SeqIndexFloatGreaterThan
  #define EQUALS(a,b) (Global.fuzzy.lt (a, b))
  #define COMPARE <
  #define EQUALSstring "<"
  #define EQUALSIOAstring "<"
  #define EQUALSSIMPLIFYstring "<"
  #define EQUALSQUANTstring "Lt"
#elif defined(LESSEQUAL)
  #define CLASSNAME SeqIndexIntLessEqual
  #define CLASS_SWAP SeqIndexIntGreaterEqual
  #define EQUALS(a,b) (a <= b)
  #define COMPARE <=
  #define EQUALSstring "<="
  #define EQUALSIOAstring "<="
  #define EQUALSSIMPLIFYstring "<="
  #define EQUALSQUANTstring "Lte"
#elif defined(LESSEQUALFLOAT)
  #define CLASSNAME SeqIndexFloatLessEqual
  #define CLASS_SWAP SeqIndexFloatGreaterEqual
  #define EQUALS(a,b) (Global.fuzzy.lte (a, b))
  #define COMPARE <=
  #define EQUALSstring "<="
  #define EQUALSIOAstring "<="
  #define EQUALSSIMPLIFYstring "<="
  #define EQUALSQUANTstring "Lte"
#elif defined(GREATERTHAN)
  #define CLASSNAME SeqIndexIntGreaterThan
  #define CLASS_SWAP SeqIndexIntLessThan
  #define EQUALS(a,b) (a > b)
  #define COMPARE >
  #define EQUALSstring ">"
  #define EQUALSIOAstring ">"
  #define EQUALSSIMPLIFYstring ">"
  #define EQUALSQUANTstring "Gt"
#elif defined(GREATERTHANFLOAT)
  #define CLASSNAME SeqIndexFloatGreaterThan
  #define CLASS_SWAP SeqIndexFloatLessThan
  #define EQUALS(a,b) (Global.fuzzy.gt (a, b))
  #define COMPARE >
  #define EQUALSstring ">"
  #define EQUALSIOAstring ">"
  #define EQUALSSIMPLIFYstring ">"
  #define EQUALSQUANTstring "Gt"
#elif defined(GREATEREQUAL)
  #define CLASSNAME SeqIndexIntGreaterEqual
  #define CLASS_SWAP SeqIndexIntLessEqual
  #define EQUALS(a,b) (a >= b)
  #define COMPARE >=
  #define EQUALSstring ">="
  #define EQUALSIOAstring ">="
  #define EQUALSSIMPLIFYstring ">="
  #define EQUALSQUANTstring "Gte"
#elif defined(GREATEREQUALFLOAT)
  #define CLASSNAME SeqIndexFloatGreaterEqual
  #define CLASS_SWAP SeqIndexFloatLessEqual
  #define EQUALS(a,b) (Global.fuzzy.gte (a, b))
  #define COMPARE >=
  #define EQUALSstring ">="
  #define EQUALSIOAstring ">="
  #define EQUALSSIMPLIFYstring ">="
  #define EQUALSQUANTstring "Gte"
#else
  #error "EQUAL, NONEQUAL, LESSTHAN, LESSEQUAL, GREATERTHAN, GREATEREQUAL, EQUALFLOAT, NONEQUALFLOAT, LESSTHANFLOAT, LESSEQUALFLOAT, GREATERTHANFLOAT, or GREATEREQUALFLOAT must be defined"
#endif

// ***** This file is automatically generated from SeqIndexComparison.java.jpp

package daikon.inv.unary.sequence;

import daikon.*;
import daikon.VarInfoName.Slice;
import daikon.VarInfoName.Elements;
import daikon.inv.*;
import daikon.inv.binary.twoSequence.*;
import daikon.suppress.*;
import daikon.inv.OutputFormat.Repair;

import utilMDE.*;
import java.util.Iterator;
import java.util.logging.Logger;

/**
 * Represents an invariant over sequences of PRIMITIVE values between the
 * index of an element of the sequence and the element itself.
 * Prints as <samp>x[i] COMPARE i</samp>.
 **/
public class CLASSNAME extends SUPERCLASS {
  // We are Serializable, so we specify a version to allow changes to
  // method signatures without breaking serialization.  If you add or
  // remove fields, you should change this number to the current date.
  static final long serialVersionUID = 20040203L;

  /** Debug tracer. **/
  public static final Logger debug
    = Logger.getLogger ("daikon.inv.unary.sequence." + STRING(CLASSNAME));

  // Variables starting with dkconfig_ should only be set via the
  // daikon.config.Configuration interface.
  /**
   * Boolean.  True iff CLASSNAME invariants should be considered.
   **/
  public static boolean dkconfig_enabled = true;

  private CLASSNAME () {
    super (null);
  }

  protected CLASSNAME (PptSlice slice) {
    super (slice);
    Assert.assertTrue (slice != null);
    Assert.assertTrue(var().rep_type == ProglangType.ASSERTYPE);
  }

  private static CLASSNAME proto  = null;

  /** Returns the prototype invariant for CLASSNAME **/
  public static Invariant get_proto() {
    if (proto == null)
      proto = new CLASSNAME ();
    return (proto);
  }

  /** returns whether or not we are enabled **/
  public boolean enabled() {
    return (dkconfig_enabled && !dkconfig_SeqIndexDisableAll);
  }

  /** Check that SeqIndex comparisons make sense over these vars **/
  public boolean instantiate_ok (VarInfo[] vis) {

    if (!valid_types (vis))
      return (false);

    // Don't compare indices to object addresses.
    ProglangType elt_type = vis[0].file_rep_type.elementType();
    if (!elt_type.BASEISTYPE())
      return (false);

    // Make sure that the indices are comparable to the elements
    VarInfo seqvar = vis[0];
    VarComparability elt_compar,index_compar;
    if (seqvar.comparability != null) {
      elt_compar = seqvar.comparability.elementType();
      index_compar = seqvar.comparability.indexType(0);
    } else {
      elt_compar = null;
      index_compar = null;
    }
    if (! VarComparability.comparable (
                VarInfoName.parse ("seqvar.name.elementName"), elt_compar,
                VarInfoName.parse ("seqvar.name.indexName0"), index_compar)) {
      return (false);
    }

    return (true);
  }

  /** Instantiate the invariant on the specified slice **/
  public Invariant instantiate_dyn (PptSlice slice) {
    return new CLASSNAME (slice);
  }

  /** NI suppressions, initialized in get_ni_suppressions() **/
  private static NISuppressionSet suppressions = null;

  /** returns the ni-suppressions for CLASSNAME **/
  public NISuppressionSet get_ni_suppressions() {
    if (suppressions == null) {
      #if defined(LESSEQUAL) || defined(LESSEQUALFLOAT) || defined(GREATEREQUAL) || defined(GREATEREQUALFLOAT)
      NISuppressee suppressee = new NISuppressee (CLASSNAME.class, 1);
      #endif

      // suppressor definitions (used in suppressions below)
      #if defined(LESSEQUAL) || defined(LESSEQUALFLOAT) || defined(GREATEREQUAL) || defined(GREATEREQUALFLOAT)
      NISuppressor v1_eq_v2 = new NISuppressor (0, SEQ_INDEX_EQUAL.class);
      #endif
      #if defined(GREATEREQUAL) || defined(GREATEREQUALFLOAT)
      NISuppressor v1_gt_v2 = new NISuppressor (0,SEQ_INDEX_GREATERTHAN.class);
      #endif
      #if defined(LESSEQUAL) || defined(LESSEQUALFLOAT)
      NISuppressor v1_lt_v2 = new NISuppressor (0, SEQ_INDEX_LESSTHAN.class);
      #endif

      suppressions = new NISuppressionSet(new NISuppression[]{
        #if defined(LESSEQUAL) || defined(LESSEQUALFLOAT)
          // (v1[i] == i) ==> v1[i] <= i
          new NISuppression (v1_eq_v2, suppressee),
          // (v1[i] < i) ==> v1[i] <= i
          new NISuppression (v1_lt_v2, suppressee),
        #elif defined(GREATEREQUAL) || defined(GREATEREQUALFLOAT)
          // (v1[i] == i) ==> v1[i] >= i
          new NISuppression (v1_eq_v2, suppressee),
          // (v1[i] > i) ==> v1[i] >= i
          new NISuppression (v1_gt_v2, suppressee),
        #endif
        });
    }
    return (suppressions);
  }

  protected Invariant resurrect_done_swapped() {
    #if defined(SYMMETRIC_OP)
      return this;
    #else
      return new CLASS_SWAP(ppt);
    #endif
  }

  public String getComparator() {
    return EQUALSstring;
  }

  public String format_using(OutputFormat format) {
    if (format.isJavaFamily()) return format_java_family(format);

    // TODO: Eliminate the unnecessary format_xxx() below if the
    // format_java_family() can handle all the Java family output.

    if (format == OutputFormat.DAIKON) return format_daikon();
    if (format == OutputFormat.REPAIR) return format_repair();
    if (format == OutputFormat.IOA) return format_ioa();
    if (format == OutputFormat.ESCJAVA) return format_esc();
    if (format == OutputFormat.SIMPLIFY) return format_simplify();

    return format_unimplemented(format);
  }

  public String format_daikon() {

    VarInfoName viname = var().name;
    if ((new VarInfoName.ElementsFinder(viname)).elems() != null) {
      return viname.applySubscript(VarInfoName.parse("i")).name() + " "
             + EQUALSstring + " i";
    } else {
      return viname.name() + " " + EQUALSstring + " (index)";
    }
  }

  public String format_repair() {
    VarInfoName viname = var().name;
    if ((new VarInfoName.ElementsFinder(viname)).elems() != null) {
      VarInfoName needy=var().name;
      VarInfoName lower, upper;
      if (needy instanceof Elements) {
        Elements sequence = (Elements) needy;
        lower = sequence.getLowerBound();
        upper = sequence.getUpperBound();
      } else if (needy instanceof Slice) {
        Slice slice = (Slice) needy;
        lower = slice.getLowerBound();
        upper = slice.getUpperBound();
      } else {
        // unreachable; placate javac
        return "$noprint(FIX REPAIR IN SEQINDECOMPARISON)";
      }

      String set=Repair.getRepair().generateRangeSet(var().ppt,lower,upper);

      String relation=Repair.getRepair().convertArraytoRelation(var().ppt,var().name,var());
      String index=Repair.getRepair().getQuantifierVar();
      Repair.getRepair().appendQuantifier(index,set);
      return index+"."+relation+EQUALSstring+index;
    } else {
      return "$noprint("+viname.repair_name(var()) + " " + EQUALSstring + " (index))";
    }
  }

  /* IOA */
  public String format_ioa() {
    if (var().isIOASet())
      return "Not valid for Sets: " + format();

    VarInfoName.QuantHelper.IOAQuantification quant =
            new VarInfoName.QuantHelper.IOAQuantification (var ());

    return quant.getQuantifierExp() + quant.getMembershipRestriction(0) +
      " => " + quant.getVarName(0).ioa_name() + " " + EQUALSIOAstring + " " +
      quant.getVarIndexedString(0) + quant.getClosingExp();
  }

  // Bad code here: if the first index is changed from i this breaks
  public String format_esc() {
    String[] form =
      VarInfoName.QuantHelper.format_esc(new VarInfoName[]
        { var().name });
    return form[0] + "(" + form[1] + " " + EQUALSstring + " i)" + form[2];
  }

//   public String format_jml() {
//     VarInfoName.QuantHelper.QuantifyReturn qret
//         = VarInfoName.QuantHelper.quantify(new VarInfoName[] { var().name });
//
//     String[] form = VarInfoName.QuantHelper.format_jml(qret);
//
//     VarInfoName index1 = qret.bound_vars.get(0)[0];
//
//     return form[0] + form[1] + " " + EQUALSstring + " " + index1.name()
//            + form[2];
//   }

  public String format_java_family(OutputFormat format) {
    return "daikon.Quant.elts" + EQUALSQUANTstring + "Index(" + var().name.name_using(format, var()) + ")";
  }

  public String format_simplify() {
    String[] form =
      VarInfoName.QuantHelper.format_simplify(new VarInfoName[]
        { var().name }, false, false, false, true);
    return form[0] + "(" + EQUALSSIMPLIFYstring + " " + form[1] + " " + form[2] + ")"
      + form[3];
  }

  public InvariantStatus check_modified(PRIMITIVE[] a, int count) {
    for (int i=0; i<a.length; i++) {
      if (!EQUALS (a[i], i))
        return InvariantStatus.FALSIFIED;
    }
    return InvariantStatus.NO_CHANGE;
  }

  public InvariantStatus add_modified(PRIMITIVE[] a, int count) {

    if (logDetail())
      log ("Entered add_modified: ppt.num_values()==" +
           ppt.num_values() + ", sample== " + ArraysMDE.toString(a));
    InvariantStatus stat = check_modified (a, count);
    if (logDetail())
      log ("Exiting add_modified status = " + stat);

    return stat;
  }

  protected double computeConfidence() {

    // Make sure there have been some elements in the sequence
    VALUE_SET vs = (VALUE_SET) ppt.var_infos[0].get_value_set();
    if (vs.elem_cnt() == 0)
      return Invariant.CONFIDENCE_UNJUSTIFIED;

    int num_values = ppt.num_values();
    if (num_values == 0)
      return Invariant.CONFIDENCE_UNJUSTIFIED;

    #if defined(EQUAL) || defined(EQUALFLOAT)
      return Invariant.CONFIDENCE_JUSTIFIED;
    #elif defined(NONEQUAL) || defined(NONEQUALFLOAT)
      int max_indx = vs.max_length() - 1;
      if ((vs.min() > max_indx) || (vs.max() < 0))
        return Invariant.CONFIDENCE_UNJUSTIFIED;
      else {
        long overlap = (long) (Math.min (vs.max(), max_indx)
                                                    - Math.max (vs.min(), 0));
        if (overlap < 0)
          return Invariant.CONFIDENCE_UNJUSTIFIED;
        overlap++;
        double range1 = (double)max_indx + 1;
        double range2 = (double)vs.max() - vs.min() + 1;

        // probability of being equal by chance
        //  = (overlap/range1) * (overlap/range2) * (1/overlap)
        //  = overlap/(range1 * range2)

        double confidence_one_nonequal = ((double)overlap)/(range1 * range2);

        // The factor of 2 is a hack, but this seems too stringent otherwise
        confidence_one_nonequal = Math.min(1.0, 2.0*confidence_one_nonequal);

        Assert.assertTrue(! Double.isNaN(confidence_one_nonequal) &&
                          confidence_one_nonequal >= 0 &&
                          confidence_one_nonequal <= 1
                          // "overlap=" + overlap
                          // + ", range1=" + range1
                          // + ", range2=" + range2
                          );
        return 1 - Math.pow (1 - confidence_one_nonequal, vs.elem_cnt());
      }
    #else
      return 1 - Math.pow (.5, num_values);
    #endif
  }


  public boolean isSameFormula(Invariant other) {
    return true;
  }

  public boolean isExclusiveFormula(Invariant other) {
    return false;
  }

  // Look up a previously instantiated invariant.
  public static CLASSNAME find(PptSlice ppt) {
    Assert.assertTrue(ppt.arity() == 1);
    for (Iterator<Invariant> itor = ppt.invs.iterator(); itor.hasNext(); ) {
      Invariant inv = itor.next();
      if (inv instanceof CLASSNAME)
        return (CLASSNAME) inv;
    }
    return null;
  }

  /**
   * Checks to see if this is obvious over the specified variables
   * Implements the following checks: <pre>
   *
   *    (A[] subsequence B[]) ^ (B[i] op i) ==> A[i] op i
   * </pre>
   *
   * JHP: Its not obvious (to me) that this is true except when the
   * subsequence starts at index 0.  If B[] = {0, 1, 2, 3, 4} and
   * A[] = {2, 3, 4}, A[] is a subsequence of B[] and B[i] == i,
   * but A[i] = i is not true.
   */
  public DiscardInfo isObviousDynamically(VarInfo[] vis) {

    DiscardInfo super_result = super.isObviousDynamically(vis);
    if (super_result != null) {
      return super_result;
    }

    VarInfo seqvar = vis[0];

    // For each other sequence variable, if it is a supersequence of this
    // one and it has the same invariant, then this one is obvious.
    // We have to check for the same equality set here, because
    // isObviousDynamically is called for each member of the equality set.
    // We don't want other members of our own equality set to make this obvious
    PptTopLevel pptt = ppt.parent;
    for (int i=0; i<pptt.var_infos.length; i++) {
      VarInfo vi = pptt.var_infos[i];
      if (vi.equalitySet == seqvar.equalitySet)
        continue;
      if (SUBSEQUENCE.isObviousSubSequenceDynamically(this, seqvar, vi)) {
        PptSlice1 other_slice = pptt.findSlice(vi);
        if (other_slice != null) {
          CLASSNAME other_sine = CLASSNAME.find(other_slice);
          if ((other_sine != null) && other_sine.enoughSamples()) {
            return new DiscardInfo(this, DiscardCode.obvious,
                        "The invariant " + format() + " over var "
                       + seqvar.name.name() + " also holds over "
                       +" the supersequence " + vi.name.name());
          }
        }
      }
    }

    return null;
  }


}

#if 0
Do not attempt to compile this file with a Java compiler such as javac.
You first need to preprocess it with cpp, the C preprocessor.
The correct way to build the system is to run 'make'.
#endif

#if !(defined(SCALAR) || defined(STRING) || defined(FLOAT) \
      || defined(SEQUENCE) || defined(STRINGSEQUENCE) || defined(FLOATSEQUENCE) \
      || defined(ELT) || defined(ELTSTRING) || defined(ELTFLOAT))
  #error "One of SCALAR, STRING, FLOAT, SEQUENCE, STRINGSEQUENCE, FLOATSEQUENCE, ELT, ELTSTRING, or ELTFLOAT must be defined"
#endif

#if defined(SCALAR) || defined(STRING) || defined(FLOAT)
  #define IS_SCALAR
  #if defined(SCALAR) || defined(FLOAT)
    #define IS_NUMERIC
  #endif
#elif defined(SEQUENCE) || defined(STRINGSEQUENCE) || defined(FLOATSEQUENCE)
  #define IS_SEQUENCE
  #if defined(SEQUENCE) || defined(FLOATSEQUENCE)
    #define IS_SEQUENCE_NUMERIC
  #endif
#elif defined(ELT) || defined(ELTSTRING) || defined(ELTFLOAT)
  #define IS_ELT
  #if defined(ELT) || defined(ELTFLOAT)
    #define IS_ELT_NUMERIC
  #endif
#else
  #error "Impossible"
#endif

#if defined(SCALAR) || defined(SEQUENCE) || defined(ELT)
  #define BASE_INT
  #define BASE_NUMERIC
#elif defined(FLOAT) || defined(FLOATSEQUENCE) || defined(ELTFLOAT)
  #define BASE_FLOAT
  #define BASE_NUMERIC
#elif defined(STRING) || defined(STRINGSEQUENCE) || defined(ELTSTRING)
  #define BASE_STRING
#else
  #error "Impossible"
#endif


#define EQUALS(a,b) ((a) == (b))
#define JAVA_EQUALS_STRING(x) " == " + x

#if defined(SCALAR)
  #define SCALARPKG scalar
  #define INT long
  #define ONEOFSCALAR OneOfScalar
  #define ONEOFSCALAR_STRING "OneOfScalar"
  #define SINGLESCALAR SingleScalar
  #define NUMWRAPPER Long
  #if 0
     TOSTRING is never called for hashcodes: we never print actual values.
  #endif
  #define TOSTRING(x) ((Integer.MIN_VALUE <= x && x <= Integer.MAX_VALUE) ? String.valueOf(x) : (String.valueOf(x) + "L"))
  #define TOSTRING_SIMPLIFY(x) simplify_format_long(x)
  #define NAME var().name.name()
  #define JAVA_NAME var().name.java_name(var())
  #define REPAIR_NAME var().name.repair_name(var())
  #define NONZERO NonZero
  #define ELTONEOF EltOneOf
  #define LOWERBOUND LowerBound
  #define UPPERBOUND UpperBound
#elif defined(FLOAT)
  #undef EQUALS
  #define EQUALS(a,b) (Global.fuzzy.eq(a, b) || (Double.isNaN(a) && Double.isNaN(b)))
  #undef JAVA_EQUALS_STRING
  #define JAVA_EQUALS_STRING(x) ".equals(" + x + ")"
  #define SCALARPKG scalar
  #define INT double
  #define ONEOFSCALAR OneOfFloat
  #define ONEOFSCALAR_STRING "OneOfFloat"
  #define SINGLESCALAR SingleFloat
  #define NUMWRAPPER Double
  #define TOSTRING(x) (Double.isNaN(x) ? "Double.NaN" : String.valueOf(x))
  #define TOSTRING_SIMPLIFY(x) simplify_format_double(x)
  #define NAME var().name.name()
  #define JAVA_NAME var().name.java_name(var())
  #define REPAIR_NAME var().name.repair_name(var())
  #define NONZERO NonZeroFloat
  #define ELTONEOF EltOneOfFloat
  #define LOWERBOUND LowerBoundFloat
  #define UPPERBOUND UpperBoundFloat
#elif defined(STRING)
  #define COMMENT No "EQUALS(a,b)" because we intern and so can use equality tests
  #undef JAVA_EQUALS_STRING
  #define JAVA_EQUALS_STRING(x) ".equals(" + x + ")"
  #define SCALARPKG string
  #define INT String
  #define ONEOFSCALAR OneOfString
  #define ONEOFSCALAR_STRING "OneOfString"
  #define SINGLESCALAR SingleString
  #define TOSTRING(x) ((x==null) ? "null" : "\"" + UtilMDE.escapeNonASCII(x) + "\"")
  #define TOSTRING_SIMPLIFY(x) simplify_format_string(x)
  #define NAME var().name.name()
  #define JAVA_NAME var().name.java_name(var())
  #define REPAIR_NAME var().name.repair_name(var())
#elif defined(SEQUENCE)
  #define SCALARPKG sequence
  #define INT long[]
  #define ONEOFSCALAR OneOfSequence
  #define ONEOFSCALAR_STRING "OneOfSequence"
  #define SINGLESCALAR SingleScalarSequence
  #define TOSTRING(x) ArraysMDE.toString(x)
  #define TOSTRINGELEMENT(x) ((Integer.MIN_VALUE <= x && x <= Integer.MAX_VALUE) ? String.valueOf(x) : (String.valueOf(x) + "L"))
  #define TOSTRING_SIMPLIFY(x) simplify_format_long(x)
  #define ELT_EQUALS(a,b) ((a) == (b))
  #define NAME var().name.name()
  #define JAVA_NAME var().name.java_name(var())
  #define REPAIR_NAME var().name.repair_name(var())
#elif defined(FLOATSEQUENCE)
  #define SCALARPKG sequence
  #define INT double[]
  #define ONEOFSCALAR OneOfFloatSequence
  #define ONEOFSCALAR_STRING "OneOfSequenceFloat"
  #define SINGLESCALAR SingleFloatSequence
  #define TOSTRING(x) ArraysMDE.toString(x)
  #define TOSTRINGELEMENT(x) (Double.isNaN(x) ? "Double.NaN" : String.valueOf(x))
  #define TOSTRING_SIMPLIFY(x) simplify_format_double(x)
  #define ELT_EQUALS(a,b) (((a) == (b)) || (Double.isNaN(a) &&Double.isNaN(b)))
  #define NAME var().name.name()
  #define JAVA_NAME var().name.java_name(var())
  #define REPAIR_NAME var().name.repair_name(var())
#elif defined(STRINGSEQUENCE)
  #define SCALARPKG stringsequence
  #define INT String[]
  #define ONEOFSCALAR OneOfStringSequence
  #define ONEOFSCALAR_STRING "OneOfStringSequence"
  #define SINGLESCALAR SingleStringSequence
  #define TOSTRING(x) ArraysMDE.toString(x)
  #define TOSTRINGELEMENT(x) ((x==null) ? "null" : "\"" + UtilMDE.escapeNonASCII(x) + "\"")
  #define TOSTRING_SIMPLIFY(x) simplify_format_string(x)
  #define ELT_EQUALS(a,b) ((a) == (b))
  #define NAME var().name.name()
  #define JAVA_NAME var().name.java_name(var())
  #define REPAIR_NAME var().name.repair_name(var())
#elif defined(ELT)
  #define SCALARPKG sequence
  #define INT long
  #define NUMWRAPPER Long
  #define ONEOFSCALAR EltOneOf
  #define ONEOFSCALAR_STRING "EltOneOf"
  #define SINGLESCALAR SingleScalarSequence
  #define TOSTRING(x) (((x == 0) && (var().file_rep_type == ProglangType.HASHCODE_ARRAY)) ? "null" : ((Integer.MIN_VALUE <= x && x <= Integer.MAX_VALUE) ? String.valueOf(x) : (String.valueOf(x) + "L")))
  #define TOSTRING_SIMPLIFY(x) (((x == 0) && (var().file_rep_type == ProglangType.HASHCODE_ARRAY)) ? "null" : simplify_format_long(x))
  #define NAME var().name.name() + " elements"
  #define JAVA_NAME var().name.java_name(var())
  #define REPAIR_NAME var().name.repair_name(var())
  #define NONZERO EltNonZero
  #define LOWERBOUND LowerBound
  #define UPPERBOUND UpperBound
#elif defined(ELTFLOAT)
  #undef EQUALS
  #define EQUALS(a,b) (Global.fuzzy.eq(a, b) || (Double.isNaN(a) && Double.isNaN(b)))
  #define SCALARPKG sequence
  #define INT double
  #define NUMWRAPPER Double
  #define ONEOFSCALAR EltOneOfFloat
  #define ONEOFSCALAR_STRING "EltOneOfFloat"
  #define SINGLESCALAR SingleFloatSequence
  #define TOSTRING(x) (Double.isNaN(x) ? "Double.NaN" : String.valueOf(x))
  #define TOSTRING_SIMPLIFY(x) simplify_format_double(x)
  #define NAME var().name.name() + " elements"
  #define REPAIR_NAME var().name.repair_name(var())
  #define JAVA_NAME var().name.java_name(var())
  #define NONZERO EltNonZeroFloat
  #define LOWERBOUND LowerBoundFloat
  #define UPPERBOUND UpperBoundFloat
#elif defined(ELTSTRING)
  #define SCALARPKG stringsequence
  #define INT String
  #define ONEOFSCALAR EltOneOfString
  #define ONEOFSCALAR_STRING "EltOneOfString"
  #define SINGLESCALAR SingleStringSequence
  #define TOSTRING(x) ((x==null) ? "null" : "\"" + UtilMDE.escapeNonASCII(x) + "\"")
  #define TOSTRING_SIMPLIFY(x) simplify_format_string(x)
  #define NAME var().name.name() + " elements"
  #define REPAIR_NAME var().name.repair_name(var())
  #define JAVA_NAME var().name.java_name(var())
#else
  #error "One of SCALAR, STRING, FLOAT, SEQUENCE, STRINGSEQUENCE, FLOATSEQUENCE, ELT, ELTSTRING, or ELTFLOAT must be defined"
#endif

// ***** This file is automatically generated from OneOf.java.jpp

package daikon.inv.unary.SCALARPKG;

import daikon.*;
import daikon.inv.OutputFormat.Repair;
import daikon.inv.*;
#ifdef IS_NUMERIC
  import daikon.derive.unary.*;
  import daikon.inv.unary.sequence.*;
  import daikon.inv.binary.sequenceScalar.*;
#endif
#ifdef IS_ELT_NUMERIC
  import daikon.inv.unary.scalar.*;
  import daikon.inv.binary.twoSequence.SubSequence;
#endif

import utilMDE.*;

import java.io.*;
import java.util.logging.Logger;
import java.util.logging.Level;
#if defined(BASE_STRING)
  import java.util.regex.*;
#endif
import java.util.*;

// This subsumes an "exact" invariant that says the value is always exactly
// a specific value.  Do I want to make that a separate invariant
// nonetheless?  Probably not, as this will simplify implication and such.

#if defined (SCALAR)
  /**
   * Represents long scalars that take on only a few distinct values.  Prints
   * as either <samp>x == c</samp> (when there is only one value),
   * <samp>x one of {c1, c2, c3}</samp> (when there are multiple values),
   * or <samp>x has only one value</samp> (when <samp>x</samp> is
   * a hashcode (pointer) - this is because the numerical value of the
   * hashcode (pointer) is uninteresting).
   */
#elif defined (IS_SCALAR) || defined (IS_SEQUENCE)
  /**
   * Represents INT variables that take on only a few distinct
   * values. Prints as either
   * <samp>x == c</samp> (when there is only one value)
   * or as <samp>x one of {c1, c2, c3}</samp> (when there are multiple values).
   */
#else
  /**
   * Represents sequences of INT values where the elements of the sequence
   * take on only a few distinct values.  Prints as either
   * <samp>x[] == c</samp> (when there is only one value), or as
   * <samp>x[] one of {c1, c2, c3}</samp> (when there are multiple values).
   */
#endif

public final class ONEOFSCALAR
  extends SINGLESCALAR
  implements OneOf
{
  // We are Serializable, so we specify a version to allow changes to
  // method signatures without breaking serialization.  If you add or
  // remove fields, you should change this number to the current date.
  static final long serialVersionUID = 20030822L;

  /**
   * Debugging logger.
   **/
  public static final Logger debug
    = Logger.getLogger (ONEOFSCALAR.class.getName());

  // Variables starting with dkconfig_ should only be set via the
  // daikon.config.Configuration interface.
  /**
   * Boolean.  True iff OneOf invariants should be considered.
   **/
  public static boolean dkconfig_enabled = true;

  /**
   * Positive integer.  Specifies the maximum set size for this type
   * of invariant (x is one of <code>size</code> items).
   **/
#if defined(STRINGSEQUENCE)
  public static int dkconfig_size = 2;
#else
  public static int dkconfig_size = 3;
#endif

#ifdef BASE_INT
  /**
   * Boolean.  If true, invariants describing hashcode-typed variables
   * as having any particular value will be completely omitted from
   * Simplify-format output.  If false, hashcodes will be formatted as
   * the application of a hashcode uninterpreted function to an
   * integer representing the bit pattern of the hashcode.  One might
   * wish to omit such invariants because the exact values of the
   * hashcodes are usually uninteresting; this is the same reason they
   * print in the native Daikon format, for instance, as <samp>var has only
   * one value</samp> rather than <samp>var == 150924732</samp>.
   **/
  public static boolean dkconfig_omit_hashcode_values_Simplify = false;
#endif

  // Probably needs to keep its own list of the values, and number of each seen.
  // (That depends on the slice; maybe not until the slice is cleared out.
  // But so few values is cheap, so this is quite fine for now and long-term.)

  private INT[] elts;
  private int num_elts;

  public ONEOFSCALAR (PptSlice slice) {
    super (slice);
    if (slice == null)
      return;

#if defined(IS_ELT) || defined(IS_SEQUENCE)
    Assert.assertTrue(var().type.isPseudoArray(),
                  "ProglangType must be pseudo-array for " + ONEOFSCALAR_STRING);
#endif
#if defined(SEQUENCE)
    // Elements are interned, so can test with ==
    // (in the general online case, it's not worth interning).
    elts = new long[dkconfig_size][];
#elif defined(FLOATSEQUENCE)
    // Elements are interned, so can test with == (except that NaN != NaN)
    // (in the general online case, it's not worth interning).
    elts = new double[dkconfig_size][];
#elif defined(STRINGSEQUENCE)
    // Elements are interned, so can test with ==
    // (in the general online case, it's not worth interning).
    elts = new String[dkconfig_size][];
#else
    elts = new INT[dkconfig_size];
#endif
    num_elts = 0;
  }

  private static ONEOFSCALAR proto;

  /** Returns the prototype invariant for ONEOFSCALAR **/
  public static Invariant get_proto() {
    if (proto == null)
      proto = new ONEOFSCALAR (null);
    return (proto);
  }

  /** returns whether or not this invariant is enabled **/
  public boolean enabled() {
    return dkconfig_enabled;
  }

  /** instantiate an invariant on the specified slice **/
  public Invariant instantiate_dyn (PptSlice slice) {
    return new ONEOFSCALAR(slice);
  }

#if defined(SCALAR)
  public boolean is_boolean() {
     return (var().file_rep_type == ProglangType.BOOLEAN);
  }
  public boolean is_hashcode() {
    return (var().file_rep_type == ProglangType.HASHCODE);
  }
#else
  public boolean is_boolean() {
    return (var().file_rep_type.elementType() == ProglangType.BOOLEAN);
  }
  public boolean is_hashcode() {
    return (var().file_rep_type.elementType() == ProglangType.HASHCODE);
  }
#endif

  public ONEOFSCALAR clone() {
    ONEOFSCALAR result = (ONEOFSCALAR) super.clone();
    result.elts = (INT[]) elts.clone();
#ifdef IS_SEQUENCE
    for (int i=0; i < num_elts; i++) {
      result.elts[i] = Intern.intern((INT) elts[i].clone());
    }
#endif
    result.num_elts = this.num_elts;
    return result;
  }

  public int num_elts() {
    return num_elts;
  }

  public Object elt() {
    return elt(0);
  }

  public Object elt(int index) {
    if (num_elts <= index)
      throw new Error("Represents " + num_elts + " elements, index " + index + " not valid");
#if defined(SCALAR) || defined(ELT)
    // Not sure whether interning is necessary (or just returning an Integer
    // would be sufficient), but just in case...
    return Intern.internedLong(elts[index]);
#elif defined(FLOAT) || defined(ELTFLOAT)
    return Intern.internedDouble(elts[index]);
#else
    return elts[index];
#endif
  }

#if defined(STRING) || defined(ELTSTRING)
  static Comparator<String> comparator = new UtilMDE.NullableStringComparator();
  #define COMPARATOR_ARG , comparator
#elif defined(SEQUENCE)
  static Comparator<long[]> comparator = new ArraysMDE.LongArrayComparatorLexical();
#define COMPARATOR_ARG , comparator
#elif defined(FLOATSEQUENCE)
  static Comparator<double[]> comparator = new ArraysMDE.DoubleArrayComparatorLexical();
#define COMPARATOR_ARG , comparator
#elif defined(STRINGSEQUENCE)
  static Comparator<String[]> comparator = new ArraysMDE.ComparableArrayComparatorLexical<String>(); // need to figure out proper generic type -MDE
  #define COMPARATOR_ARG , comparator
#else
  #define COMPARATOR_ARG
#endif

  private void sort_rep() {
    Arrays.sort(elts, 0, num_elts COMPARATOR_ARG);
  }

  public INT min_elt() {
    if (num_elts == 0)
      throw new Error("Represents no elements");
    sort_rep();
    return elts[0];
  }

  public INT max_elt() {
    if (num_elts == 0)
      throw new Error("Represents no elements");
    sort_rep();
    return elts[num_elts-1];
  }

  // Assumes the other array is already sorted
  public boolean compare_rep(int num_other_elts, INT[] other_elts) {
    if (num_elts != num_other_elts)
      return false;
    sort_rep();
    for (int i=0; i < num_elts; i++)
      if (! EQUALS(elts[i],other_elts[i])) // elements are interned
        return false;
    return true;
  }

  private String subarray_rep() {
    // Not so efficient an implementation, but simple;
    // and how often will we need to print this anyway?
    sort_rep();
    StringBuffer sb = new StringBuffer();
    sb.append("{ ");
    for (int i=0; i<num_elts; i++) {
      if (i != 0)
        sb.append(", ");
      sb.append(TOSTRING(elts[i]));
    }
    sb.append(" }");
    return sb.toString();
  }

  public String repr() {
    return ONEOFSCALAR_STRING + varNames() + ": "
      + "falsified=" + falsified
      + ", num_elts=" + num_elts
      + ", elts=" + subarray_rep();
  }

#if defined(IS_SEQUENCE_NUMERIC)
  private boolean all_nulls(int value_no) {
    INT seq = elts[value_no];
    for (int i=0; i<seq.length; i++) {
      if (seq[i] != 0) return false;
    }
    return true;
  }
  private boolean no_nulls(int value_no) {
    INT seq = elts[value_no];
    for (int i=0; i<seq.length; i++) {
      if (seq[i] == 0) return false;
    }
    return true;
  }
#endif

#if (defined(IS_SCALAR))
  public INT[] getElts() {
    INT[] temp = new INT[elts.length];
    for (int i=0; i < elts.length; i++) {
      temp[i] = elts[i];
    }
    return temp;
  }
#endif

  public String format_using(OutputFormat format) {
    sort_rep();

    if (format.isJavaFamily()) return format_java_family(format);

    if (format == OutputFormat.DAIKON) {
      return format_daikon();
    } else if (format == OutputFormat.REPAIR) {
      return format_repair();
    } else if (format == OutputFormat.IOA) {
      return format_ioa();
    } else if (format == OutputFormat.SIMPLIFY) {
      return format_simplify();
    } else if (format == OutputFormat.ESCJAVA) {
      return format_esc();
    } else {
      return format_unimplemented(format);
    }
  }

  public String format_daikon() {
    String varname = NAME;
    if (num_elts == 1) {
#if defined(SCALAR) || defined(ELT)
      if (is_boolean()) {
        if ((elts[0] != 0) && (elts[0] != 1))
            System.out.println ("WARNING:: Variable "
            + varname + " is of type boolean, but has non boolean value: "
            + elts[0]);
        return varname + " == " + ((elts[0] == 0) ? "false" : "true");
      } else if (is_hashcode()) {
        if (elts[0] == 0) {
          return varname + " == " + "null";
        } else {
          return varname + " has only one value"
            // + " (hashcode=" + elts[0] + ")"
            ;
        }
      } else {
        return varname + " == " + TOSTRING(elts[0]);
      }
#elif defined(SEQUENCE)
      if (is_hashcode()) {
        // we only have one value, because add_modified dies if more
        Assert.assertTrue(num_elts == 1);
        INT value = elts[0];
        if (value.length == 0) {
          return varname + " == []";
        } else if ((value.length == 1) && (value[0] == 0)) {
          return varname + " == [null]";
        } else if (no_nulls(0)) {
          return varname + " contains no nulls and has only one value, of length " + value.length;
        } else if (all_nulls(0)) {
          return varname + " contains only nulls and has only one value, of length " + value.length;
        } else {
          return varname + " has only one value, of length " + value.length;
        }
      } else {
        return varname + " == " + TOSTRING(elts[0]);
      }
#elif defined(STRING) || defined(ELTSTRING)
      boolean is_type = is_type();
      if (! is_type) {
        return varname + " == " + TOSTRING(elts[0]);
      } else {
        // It's a type
        String str = elts[0];
        if ((str == null) || "null".equals(str)) {
          return varname + " == " + "null";
        } else {
          if (str.startsWith("[")) {
            str = UtilMDE.classnameFromJvm(str);
          }
          // ".class" (which is a suffix for a type name) and not
          // getClassSuffix (which is a suffix for an expression).
          return varname + " == " + str + ".class";
        }
      }
#else
        return varname + " == " + TOSTRING(elts[0]);
#endif
    } else {
      return varname + " one of " + subarray_rep();
    }
  }

  public String format_repair() {
    if (num_elts == 1) {
#if defined(SCALAR) || defined(ELT)
      if (is_boolean()) {
        String varname = REPAIR_NAME;
        if ((elts[0] != 0) && (elts[0] != 1))
            System.out.println ("WARNING:: Variable "
            + varname + " is of type boolean, but has non boolean value: "
            + elts[0]);
        return varname + " = " + ((elts[0] == 0) ? "false" : "true");
      } else if (is_hashcode()) {
        if (elts[0] == 0) {
          String varname = REPAIR_NAME;
	  Repair.getRepair().setForceSet();
          String str="sizeof("+varname + ") = 0";
	  Repair.getRepair().noForceSet();
          return str;
        } else {
	//One value case
		return "$noprint(onevalue)";
        }
      } else {
        String varname = REPAIR_NAME;
        return varname + " = " + TOSTRING(elts[0]);
      }
#elif defined(SEQUENCE)
      String varname = REPAIR_NAME;
      if (is_hashcode()) {
        // we only have one value, because add_modified dies if more
        Assert.assertTrue(num_elts == 1);
        INT value = elts[0];
        if (value.length == 0) {
          return "$noprint(" + varname + " = [])";
        } else if ((value.length == 1) && (value[0] == 0)) {
          return "(" + varname + " = null)";
        } else if (no_nulls(0)) {
          return "$noprint(" + varname + " contains no nulls and has only one value, of length " + value.length + ")";
        } else if (all_nulls(0)) {
          return "$noprint(" + varname + " contains only nulls and has only one value, of length " + value.length + ")";
        } else {
          return "$noprint(" + varname + " has only one value, of length " + value.length + ")";
        }
      } else {
        return varname + " = " + TOSTRING(elts[0]);
      }
#else
      String varname = REPAIR_NAME;
      return varname + " = " + TOSTRING(elts[0]);
#endif
    } else {
      String varname = REPAIR_NAME;
      sort_rep();
      StringBuffer sb = new StringBuffer();
      sb.append("(");
      for (int i=0; i<num_elts; i++) {
        if (i != 0)
          sb.append(" or ");
        sb.append("("+varname+"="+TOSTRING(elts[i])+")");
      }
      sb.append(")");
      return sb.toString();
    }
  }


#if defined(STRING) || defined(ELTSTRING)
  private boolean is_type() {
    return var().name.hasTypeOf();
  }
#endif

  /*
    public String format_java() {
    StringBuffer sb = new StringBuffer();
    for (int i = 0; i < num_elts; i++) {
    sb.append (" || (" + JAVA_NAME + JAVA_EQUALS_STRING(TOSTRING(elts[i])));
    sb.append (")");
    }
    // trim off the && at the beginning for the first case
    return sb.toString().substring (4);
    }
  */

//   public String format_java() {
//     // have to take a closer look at this!
//     sort_rep();
// #if defined(IS_ELT)
//     String[] form = VarInfoName.QuantHelper.format_java(new VarInfoName[] { var().name } );
//     String varname = form[1];
// #if defined(ELTSTRING)
//     if ((var().rep_type == ProglangType.CHAR_ARRAY_ARRAY)
//         && varname.endsWith("[]")) {
//       varname = varname.substring(0, varname.length()-2);
//     }
// #endif
// #elif defined(IS_SCALAR)
//     String varname = var().name.java_name(var());
// #if defined(STRING)
//     if ((var().rep_type == ProglangType.CHAR_ARRAY)
//         && varname.endsWith("[]")) {
//       varname = varname.substring(0, varname.length()-2);
//     }
// #endif
// #endif
//     String result;

// #if defined(STRING) || defined(ELTSTRING)
//     result = "";
//     boolean is_type = is_type();
//     for (int i=0; i<num_elts; i++) {
//       if (i != 0) { result += " || "; }
//       result += varname;
//       String str = elts[i];
//       if (!is_type) {
//         result += JAVA_EQUALS_STRING(TOSTRING(str));
//       } else {
//         result += " == ";
//         if ((str == null) || "null".equals(str)) {
//           result += "== null)";
//         } else if (str.startsWith("[")) {
//           result += "(" + UtilMDE.classnameFromJvm(str) + ")";
//         } else {
//           if (str.startsWith("\"") && str.endsWith("\"")) {
//             str = str.substring(1, str.length()-1);
//           }
//           result += "(" + str + ")";
//         }
//       }
//     }
// #elif defined(IS_NUMERIC) || defined(IS_ELT_NUMERIC)
//   #if defined(BASE_INT)
//     if (is_boolean) {
//       Assert.assertTrue(num_elts == 1);
//       Assert.assertTrue((elts[0] == 0) || (elts[0] == 1));
//       result = varname + " == " + ((elts[0] == 0) ? "false" : "true");
//     } else if (is_hashcode()) {
//       if (num_elts == 2) {
//         return "true";          // one elt is null, the other is non-null
//       } else if (elts[0] == 0) {
//         result = varname + " == " + "null";
//       } else {
//         result = varname + " != null";
//           // varname + " has only one value"
//           // + " (hashcode=" + elts[0] + ")"
//           ;
//       }
//     } else
//   #endif
//     {
//       result = "";
//       for (int i=0; i<num_elts; i++) {
//         if (i != 0) { result += " || "; }
//         // Not quite right for the case of NaN, I think.
//         result += varname + " == " + TOSTRING(elts[i]);
//       }
//     }
// #elif defined(IS_SEQUENCE_NUMERIC)
//     String length = "";
//     String forall = "";
//   #if defined(SEQUENCE)
//     if (is_hashcode()) {
//       if (num_elts == 0)  {
//         String classname = this.getClass().toString().substring(6); // remove leading "class"
//         result = "warning: method " + classname + ".format_java() needs to be implemented: " + format();
//       } else {
//         Assert.assertTrue(num_elts == 1);
//         // we only have one value, because add_modified dies if more
//         INT value = elts[0];
//         if (var().name.isApplySizeSafe()) {
//           length = var().name.applySize().java_name(var()) + " == " + value.length;
//         }
//         if (no_nulls(0)) {
//           String[] form = VarInfoName.QuantHelper.format_java(new VarInfoName[] { var().name } );
//           forall = form[0] + "(" + form[1] + " != null)" + form[2];
//         } else if (all_nulls(0)) {
//           String[] form = VarInfoName.QuantHelper.format_java(new VarInfoName[] { var().name } );
//           forall = form[0] + "(" + form[1] + " == null)" + form[2];
//         }
//       }
//     }
//   #endif
//     if (length == "" && forall == "") { // interned
//       String classname = this.getClass().toString().substring(6); // remove leading "class"
//       result = "warning: method " + classname + ".format_java() needs to be implemented: " + format();
//     } else if (length == "") { // interned
//       result = forall;
//     } else if (forall == "") { // interned
//       result = length;
//     } else {
//       result = "(" + length + ") && (" + forall + ")";
//     }
// #else
//     String classname = this.getClass().toString().substring(6); // remove leading "class"
//     result = "warning: method " + classname + ".format_java() needs to be implemented: " + format();
// #endif
// #if defined(IS_ELT)
//     result = form[0] + "(" + result + ")" + form[2];
// #endif
//     return result;
//   }

  /* IOA */
  public String format_ioa() {
    sort_rep();
#if defined(IS_ELT)
    VarInfoName.QuantHelper.IOAQuantification quant =
      new VarInfoName.QuantHelper.IOAQuantification (new VarInfo[] {var()});
    String varname = quant.getVarName(0).ioa_name();
#elif defined(IS_SCALAR)
    String varname = var().name.ioa_name();
#endif
    String result;

#if defined(STRING) || defined(ELTSTRING)
    result = "";
    for (int i=0; i<num_elts; i++) {
      if (i != 0) { result += " \\/ ("; }
      result += varname + " = " + TOSTRING(elts[i]) + ")";
    }
    result += ")";


    /*
    result = "(";
    for (int i=0; i<num_elts; i++) {
      if (i != 0) { result += " \\/ ("; }
      result += varname + " = ";
      String str = elts[i];
      if (!is_type()) {
        result += TOSTRING(str);
      } else {
        if ((str == null) || "null".equals(str)) {
          result += "\\typeof(null)";
        } else if (str.startsWith("[")) {
          result += "\\type(" + UtilMDE.classnameFromJvm(str) + ")";
        } else {
          if (str.startsWith("\"") && str.endsWith("\"")) {
            str = str.substring(1, str.length()-1);
          }
          result += "\\type(" + str + ")";
        }
        result += "***";   // to denote that it's not correct IOA syntax
      }
      result += ")";
    } // end for
    */

#elif defined(SCALAR) || defined(ELT) || defined(FLOAT) || defined(ELTFLOAT)
  #if defined(SCALAR) || defined(ELT)
    if (is_boolean()) {
      Assert.assertTrue(num_elts == 1);
      Assert.assertTrue((elts[0] == 0) || (elts[0] == 1));
      result = varname + " = " + ((elts[0] == 0) ? "false" : "true");
    } else if (is_hashcode()) {
      Assert.assertTrue(num_elts == 1);
      if (elts[0] == 0) {
        result = varname + " = " + "null";
      } else {
        result = varname + " = " + "{one value}";
      }
    } else
  #endif
    {
      result = "";
      for (int i=0; i<num_elts; i++) {
        if (i != 0) { result += " \\/ "; }
        result += "(" + varname + " = " + TOSTRING(elts[i]) + ")";
      }
    }
#elif defined(IS_SEQUENCE_NUMERIC)
    String length = "";
    String forall = "";
  #if defined(SEQUENCE)
    if (is_hashcode()) {
      // we only have one value, because add_modified dies if more
      Assert.assertTrue(num_elts == 1);
      INT value = elts[0];
      if (var().name.isApplySizeSafe()) {
        length = "size(" + var().name.ioa_name() + ") = " + value.length;
      }
      VarInfoName.QuantHelper.IOAQuantification quant = new VarInfoName.QuantHelper.IOAQuantification (var ());
      if (no_nulls(0)) {
        forall = quant.getQuantifierExp() + quant.getVarIndexedString(0) + " ~= null " + quant.getClosingExp();
      } else if (all_nulls(0)) {
        forall = quant.getQuantifierExp() + quant.getVarIndexedString(0) + " = null " + quant.getClosingExp();
      }
    }
  #endif
    if (length == "" && forall == "") { // interned; can't say anything about size or elements
      String thisclassname = this.getClass().getName();
      result = "warning: " + thisclassname + ".format_ioa() " + " needs to be implemented: " + format();
    } else if (length == "") { // interned; can't say anything about size
      result = forall;
    } else if ((forall == "") || (elts[0].length == 0)) { // interned; can't say anything about elements
      result = length;
    } else { // Default, can say about both length and elements
      result = "(" + length + ") /\\ (" + forall + ")";
    }
#elif defined(STRINGSEQUENCE)
    INT value = elts[0];
    if (var().name.isApplySizeSafe())
      result = "size(" + var().name.ioa_name() + ") = " + value.length;
    else {
      String thisclassname = this.getClass().getName();
      result = "warning: " + thisclassname + ".format_ioa() needs to be implemented: " + format();
    }
#endif
#if defined(IS_ELT)
    result = quant.getQuantifierExp() + quant.getMembershipRestriction(0) + " => " + result + quant.getClosingExp();
#endif
    return result;
  }

#if defined(BASE_STRING)
  private static Pattern dollar_char_pat = Pattern.compile("\\$([A-Za-z])");

  private static String format_esc_string2type(String str) {
    if ((str == null) || "null".equals(str)) {
      return "\\typeof(null)";
    }
    String type_str;
    if (str.startsWith("[")) {
      type_str = UtilMDE.classnameFromJvm(str);
    } else {
      type_str = str;
      if (type_str.startsWith("\"") && type_str.endsWith("\"")) {
        type_str = type_str.substring(1, type_str.length()-1);
      }
    }

    // Inner classes
    // type_str = type_str.replace('$', '.');
    // For named inner classes, convert "$" to ".".
    // For anonymous inner classes, leave as "$".
    Matcher m = dollar_char_pat.matcher(type_str);
    type_str = m.replaceAll(".$1");

    return "\\type(" + type_str + ")";
  }
#endif

#if defined(ELTSTRING) || defined(STRINGSEQUENCE)
  public boolean isValidEscExpression() {
    // format_esc will look at the particulars and decide
    return true;
  }
#endif

  public String format_esc() {
    sort_rep();
#if defined(IS_ELT)
    String[] form = VarInfoName.QuantHelper.format_esc(new VarInfoName[] { var().name } );
    String varname = form[1];
#elif defined(IS_SCALAR)
    String varname = var().name.esc_name();
#endif
    String result;
#if defined(ELTSTRING)
    // We cannot say anything about Strings in ESC, just types (which
    // Daikon stores as Strings).
    boolean valid = false;
    result = null;
    if (is_type() && num_elts == 1) {
      VarInfoName hunt = var().name;
      if (hunt instanceof VarInfoName.Prestate) {
        hunt = ((VarInfoName.Prestate) hunt).term;
      }
      if (hunt instanceof VarInfoName.TypeOf) {
        hunt = ((VarInfoName.TypeOf) hunt).term;
        if (hunt instanceof VarInfoName.Elements) {
          VarInfoName contents = ((VarInfoName.Elements) hunt).term;
          VarInfo elems_var = ppt.parent.findVar(hunt);
          if (elems_var != null) {
            if (! elems_var.type.isArray()) {
              varname = contents.esc_name();
              String type = format_esc_string2type(elts[0]);
              result = varname + ".elementType == " + type;
              // Do not use the \forall, return this directly
              return result;
            } else {
              valid = true;
              result = "";
              for (int i=0; i<num_elts; i++) {
                if (i != 0) { result += " || "; }
                result += varname + " == " + format_esc_string2type(elts[i]);
              }
            }
          }
        }
      }
    }
    if (! valid) {
      result = format_unimplemented(OutputFormat.ESCJAVA); // "needs to be implemented"
    }
#elif defined(STRING)
    // We cannot say anything about Strings in ESC, just types (which
    // Daikon stores as Strings).
    if (! is_type()) {
      result = format_unimplemented(OutputFormat.ESCJAVA); // "needs to be implemented"
    } else {
      // Format   \typeof(theArray) = "[Ljava.lang.Object;"
      //   as     \typeof(theArray) == \type(java.lang.Object[])
      // ... but still ...
      // format   \typeof(other) = "package.SomeClass;"
      //   as     \typeof(other) == \type(package.SomeClass)

      result = "";
      for (int i=0; i<num_elts; i++) {
        if (i != 0) { result += " || "; }
        result += varname + " == " + format_esc_string2type(elts[i]);
      }
    }
#elif defined(SCALAR) || defined(ELT) || defined(FLOAT) || defined(ELTFLOAT)
  #if defined(SCALAR) || defined(ELT)
    if (is_boolean()) {
      Assert.assertTrue(num_elts == 1);
      Assert.assertTrue((elts[0] == 0) || (elts[0] == 1));
      result = varname + " == " + ((elts[0] == 0) ? "false" : "true");
    } else if (is_hashcode()) {
      if (num_elts == 1) {
        if (elts[0] == 0) {
          result = varname + " == " + "null";
        } else {
          // This seems wrong, because there is already a "!= null" invariant.
          // This invariant (ONEOFSCALAR) just shouldn't print for ESC format.
          result = varname + " != null";
          // varname + " has only one value"
          // + " (hashcode=" + elts[0] + ")"
        }
      } else if (num_elts == 2) {
        // add_modified allows two elements iff one is null
        Assert.assertTrue(elts[0] == 0);
        Assert.assertTrue(elts[1] != 0);
        return format_unimplemented(OutputFormat.ESCJAVA); // "needs to be implemented"
      } else if (num_elts == 0) {
        // Do nothing
        return format_unimplemented(OutputFormat.ESCJAVA); // "needs to be implemented"
      } else {
        throw new Error ("Contains more than 2 elements");
      }
    } else
  #endif
    {
      result = "";
      for (int i=0; i<num_elts; i++) {
        if (i != 0) { result += " || "; }
        result += varname + " == " + TOSTRING(elts[i]);
      }
    }
#elif defined(IS_SEQUENCE_NUMERIC)
    String length = "";
    String forall = "";
  #if defined(SEQUENCE)
    if (is_hashcode()) {
      // we only have one value, because add_modified dies if more
      Assert.assertTrue(num_elts == 1);
      INT value = elts[0];
      if (var().type.isArray()) {
        if (var().name.isApplySizeSafe()) {
          length = var().name.applySize().esc_name() + " == " + value.length;
        }
        if (no_nulls(0)) {
          String[] form = VarInfoName.QuantHelper.format_esc(new VarInfoName[] { var().name } );
          forall = form[0] + "(" + form[1] + " != null)" + form[2];
        } else if (all_nulls(0)) {
          String[] form = VarInfoName.QuantHelper.format_esc(new VarInfoName[] { var().name } );
          forall = form[0] + "(" + form[1] + " == null)" + form[2];
        }
      }
    }
  #endif
    if (length == "" && forall == "") { // interned
      return format_unimplemented(OutputFormat.ESCJAVA); // "needs to be implemented"
    } else if (length == "") { // interned
      result = forall;
    } else if (forall == "") { // interned
      result = length;
    } else {
      result = "(" + length + ") && (" + forall + ")";
    }
#elif defined(STRINGSEQUENCE)
    // If the variable expression is a raw sequence, examine its
    // element type(s).
    if (var().name instanceof VarInfoName.TypeOf) {
      VarInfoName term = ((VarInfoName.TypeOf) var().name).term;
      if (term instanceof VarInfoName.Elements) {
        String varname = ((VarInfoName.Elements) term).term.esc_name();
        String type = null;
        boolean consistent = true;
        for (int i=0; consistent && i<num_elts; i++) {
          String[] elt = elts[i];
          for (int j=0; consistent && j<elt.length; j++) {
            String maybe = format_esc_string2type(elt[j]);
            if (type == null) {
              type = maybe;
            } else {
              consistent &= type.equals(maybe);
            }
          }
        }
        if (consistent && (type != null)) {
          VarInfo term_var = ppt.parent.findVar(term);
          if (term_var != null) {
            if (term_var.type.isArray()) {
              return "\\elemtype(" + varname + ") == " + type;
            } else {
              return varname + ".elementType == " + type;
            }
          }
        }
      }
    }
    result = format_unimplemented(OutputFormat.ESCJAVA); // "needs to be implemented"
#endif
#if defined(IS_ELT)
    result = form[0] + "(" + result + ")" + form[2];
#endif
    return result;
  }

  public String format_java_family(OutputFormat format) {

    String result;

#if !defined(SEQUENCE)
    // Setting up the name of the unary variable
    String varname = var().name.name_using(format, var());
#endif

#if defined(ELTSTRING)
    if ((var().rep_type == ProglangType.CHAR_ARRAY_ARRAY)
        && varname.endsWith("[]")) {
      varname = varname.substring(0, varname.length()-2);
    }
#endif

#if defined(IS_ELT)

    // Constructing the array that unary val will be compared against
  #if defined(ELT)
    String oneOfArray = "new long[] { ";
  #elif defined(ELTFLOAT)
    String oneOfArray = "new double[] { ";
  #elif defined(ELTSTRING)
    String oneOfArray = "new String[] { ";
  #endif
    for (int i = 0 ; i < num_elts ; i++) {
      if (i != 0) { oneOfArray += ", "; }
      oneOfArray = oneOfArray + TOSTRING(elts[i]);
    }
    oneOfArray += " }";

    // Calling quantification method
    if (num_elts == 1) {

    #if defined(BASE_INT)
      if (is_boolean()) {
        result = "daikon.Quant.eltsEqual(" + varname + ", "
          + ((elts[0] == 0) ? "false" : "true") + ")";
      } else if (is_hashcode()) {
        result =
          ((elts[0] == 0)
           ? ("daikon.Quant.eltsEqual(" + varname + ", null)")
           : ("daikon.Quant.eltsNotEqual(" + varname + ", null)"));
      } else
    #endif
        {
          result = "daikon.Quant.eltsEqual(" + varname + ", "
            + TOSTRING(elts[0]) + ")";
        }
    } else {
      Assert.assertTrue(num_elts > 1);
      // eltsOneOf == subsetOf
      result = "daikon.Quant.subsetOf(" + varname + ", " + oneOfArray + ")";
    }

#elif defined(IS_SCALAR)

  #if defined(IS_NUMERIC)

    #if defined(BASE_INT)

    if (is_boolean()) {
      Assert.assertTrue(num_elts == 1);
      Assert.assertTrue((elts[0] == 0) || (elts[0] == 1));
      result = varname + " == " + ((elts[0] == 0) ? "false" : "true");
    } else if (is_hashcode()) {
      if (num_elts == 2) {
        return "true";          // one elt is null, the other is non-null
      } else if (elts[0] == 0) {
        result = varname + " == " + "null";
      } else {
        result = varname + " != null";
          // varname + " has only one value"
          // + " (hashcode=" + elts[0] + ")"
      }
    } else

    #endif

    {
      result = "";
      for (int i=0; i<num_elts; i++) {
        if (i != 0) { result += " || "; }

        #if defined(FLOAT)
        result += "daikon.Quant.fuzzy.eq(" + varname + ", " + TOSTRING(elts[i]) + ")";
        #else
        result += varname + " == " + TOSTRING(elts[i]);
        #endif
      }
    }

  #elif defined(STRING)

    result = "";
    boolean is_type = is_type();
    for (int i=0; i<num_elts; i++) {
      if (i != 0) { result += " || "; }
      String str = elts[i];
      if (!is_type) {
        result += varname + JAVA_EQUALS_STRING(TOSTRING(str));
      } else {
        // It's a type
        if ((str == null) || "null".equals(str)) {
          result += varname + " == " + "null";
        } else {
          if (str.startsWith("[")) {
            str = UtilMDE.classnameFromJvm(str);
          }
          // ".class" (which is a suffix for a type name) and not
          // getClassSuffix (which is a suffix for an expression).
          result += varname + " == " + str + ".class";
        }
      }
    }

  #endif

#elif defined(IS_SEQUENCE)

  #if defined(SEQUENCE)

    result = "(\"oneOf.java.jpp: SEQUENCE unimplemented\" != null)"; // "interned"

  #else

    result = "";
    for (int i=0; i<num_elts; i++) {
      if (i != 0) { result += " || "; }

    #if defined(STRINGSEQUENCE)
      String seq = "new String[] { ";
    #elif defined(FLOATSEQUENCE)
      String seq = "new double[] { ";
    #endif
      for (int j = 0 ; j < elts[i].length ; j++) {
        if (j != 0) { seq += ", "; }
        seq = seq + TOSTRINGELEMENT(elts[i][j]);
      }
      seq += " }";

      result += "daikon.Quant.pairwiseEqual(" + varname + ", " + seq + ")";
    }
  #endif

#endif

    return result;
  }

  public String format_simplify() {
#ifdef BASE_INT
    if (is_hashcode() && dkconfig_omit_hashcode_values_Simplify)
      return "(AND)";
#endif
    sort_rep();
#if defined(IS_ELT)
    String[] form = VarInfoName.QuantHelper.format_simplify(new VarInfoName[] { var().name } );
    String varname = form[1];
#elif defined(IS_SCALAR)
    String varname =
      var().simplifyFixup(var().name.name_using(OutputFormat.SIMPLIFY, null));
#endif
    String result;
#if defined(STRING) || defined(ELTSTRING)
    result = "";
    boolean is_type = is_type();
    for (int i=0; i<num_elts; i++) {
      String value = elts[i];
      if (is_type) {
        if (value == null) {
          // do nothing
        } else if (value.startsWith("[")) {
          value = UtilMDE.classnameFromJvm(value);
        } else if (value.startsWith("\"") && value.endsWith("\"")) {
          value = value.substring(1, value.length()-1);
        }
        value = "|T_" + value + "|";
      } else {
        value = TOSTRING_SIMPLIFY(value);
      }
      result += " (EQ " + varname + " " + value + ")";
    }
    if (num_elts > 1) {
      result = "(OR" + result + ")";
    } else if (num_elts == 1) {
      // chop leading space
      result = result.substring(1);
    } else if (num_elts == 0) {
      return format_too_few_samples(OutputFormat.SIMPLIFY, null);
    }
#elif defined(SCALAR) || defined(ELT) || defined(FLOAT) || defined(ELTFLOAT)
  #if defined(SCALAR) || defined(ELT)
    if (is_boolean()) {
      Assert.assertTrue(num_elts == 1);
      Assert.assertTrue((elts[0] == 0) || (elts[0] == 1));
      result = "(EQ " + varname + " " + ((elts[0] == 0) ? "|@false|" : "|@true|") + ")";
    } else if (is_hashcode()) {
      if (num_elts == 1) {
        result = "(EQ " + varname + " " +
          ((elts[0] == 0) ? "null" :
           ("(hashcode " + simplify_format_long(elts[0]) + ")")) + ")";
      } else if (num_elts == 2) {
        // add_modified allows two elements iff one is null
        Assert.assertTrue(elts[0] == 0);
        Assert.assertTrue(elts[1] != 0);
        result = "(OR (EQ " + varname + " null) (EQ " + varname
          + "(hashcode " + simplify_format_long(elts[1]) + ")))";
      } else if (num_elts == 0) {
        return format_too_few_samples(OutputFormat.SIMPLIFY, null);
      } else {
        throw new Error ("Contains more than 2 elements");
      }
    } else
  #endif
    {
      result = "";
      for (int i=0; i<num_elts; i++) {
        result += " (EQ " + varname + " " + TOSTRING_SIMPLIFY(elts[i]) + ")";
      }
      if (num_elts > 1) {
        result = "(OR" + result + ")";
      } else if (num_elts == 1) {
        // chop leading space
        result = result.substring(1);
      } else {
        // Haven't actually seen any data, so we're vacuously true
        return format_too_few_samples(OutputFormat.SIMPLIFY, null);
      }
    }
#elif defined(IS_SEQUENCE)
    StringBuffer resultBuf = new StringBuffer();
    for (int i=0; i<num_elts; i++) {
      String length = null;
      String contents = null;
      INT seq = elts[i];
      VarInfoName[] bounds;
      VarInfoName offset = null;
      if (var().name.isApplySizeSafe()) {
        length = "(EQ " + var().name.applySize().simplify_name() + " "
          + simplify_format_long(seq.length) + ")";
      } else if ((bounds = var().name.getSliceBounds()) != null) {
        String size = "(+ 1 (- " + bounds[1].simplify_name() + " " +
          bounds[0].simplify_name() + "))";
        length = "(EQ " + size + " " + simplify_format_long(seq.length) + ")";
        offset = bounds[0];
      }
#ifdef SEQUENCE
      if (is_hashcode()) {
        if (no_nulls(i)) {
          String[] form =
            VarInfoName.QuantHelper.format_simplify(new VarInfoName[]
              { var().name } );
          contents = form[0] + "(NEQ " + form[1] + "  null)" + form[2];
        } else if (all_nulls(i)) {
          String[] form =
            VarInfoName.QuantHelper.format_simplify(new VarInfoName[]
              { var().name } );
          contents = form[0] + "(EQ " + form[1] + "  null)" + form[2];
        }
      } else
#endif
      {
        StringBuffer contentsBuf = new StringBuffer();
        for (int j = 0; j < seq.length; j++) {
          if (j + 3 < seq.length &&
              ELT_EQUALS(seq[j], seq[j+1]) &&
              ELT_EQUALS(seq[j], seq[j+2]) &&
              ELT_EQUALS(seq[j], seq[j+3])) {
            // Compress a sequence of adjacent values
            int k = j + 4;
            for (; k < seq.length; k++)
              if (!ELT_EQUALS(seq[j], seq[k]))
                break;
            k--;
            VarInfoName index_var =
              VarInfoName.QuantHelper.getFreeIndex(var().name);
            String index_name = index_var.simplify_name();
            String cond_left, cond_right;
            if (offset == null) {
              cond_left  = "(<= " + j + " " + index_name + ")";
              cond_right = "(<= " + index_name + " " + k + ")";
            } else {
              cond_left = "(<= (+ " + offset.simplify_name() + " " + j + ") "
                + index_name + ")";
              cond_right = "(>= (+ " + offset.simplify_name() + " " + k + ") "
                + index_name + ")";
            }
            String cond = "(AND " + cond_left + " " + cond_right + ")";
            VarInfoName nth =
              VarInfoName.QuantHelper.selectNth(var().name, index_var, 0);
            String eq = "(EQ " + nth.simplify_name() + " " +
              TOSTRING_SIMPLIFY(seq[j]) + ")";
            String implies = "(IMPLIES " + cond + " " + eq + ")";
            String forall = "(FORALL (" + index_name + ") " + implies + ")";
            contentsBuf.append(" " + forall);
            j = k;
          } else {
            // Output a single value
            VarInfoName nth =
              VarInfoName.QuantHelper.selectNth(var().name, offset, j);
            if (nth == null) {
              String classname = this.getClass().toString().substring(6);
              result = "warning: method " + classname
                + ".format_simplify() needs to fix selectNth(): " + format();
              return result;
            }
            String value = TOSTRING_SIMPLIFY(seq[j]);
            contentsBuf.append(" (EQ " + nth.simplify_name() + " "
                               + value + ")");
          }
        }
        if (seq.length > 1) {
          contents = "(AND " + contentsBuf.toString() + ")";
        } else if (seq.length == 1) {
          contents = contentsBuf.toString().substring(1);
        } else if (seq.length == 0) {
          contents = null; // back from ""
        }
      }
      if (length == null && contents == null) {
        resultBuf.append(" ");
      } else if (length == null && contents != null) {
        resultBuf.append(" " + contents);
      } else if (length != null && contents == null) {
        resultBuf.append(" " + length);
      } else {
        Assert.assertTrue(length != null && contents != null);
        resultBuf.append(" (AND " + length + " " + contents + ")");
      }

    }
    if (num_elts > 1) {
      result = "(OR" + resultBuf.toString() + ")";
    } else if (num_elts == 1) {
      // chop leading space
      result = resultBuf.toString().substring(1);
    } else if (num_elts == 0) {
      return format_too_few_samples(OutputFormat.SIMPLIFY, null);
    } else {
      Assert.assertTrue(false);
      throw new Error("this can't happen");
      // result = null;
    }
    if (result.trim().equals(""))
      result = "format_simplify() failed on a weird OneOf";
#else
    String classname = this.getClass().toString().substring(6); // remove leading "class "
    result =  "warning: method " + classname + ".format_simplify() needs to be implemented: " + format();
#endif
#if defined(IS_ELT)
    result = form[0] + result + form[2];
#endif
    if (result.indexOf("format_simplify") == -1)
      daikon.simplify.SimpUtil.assert_well_formed(result);
    return result;
  }

  /* Old version with interleaved #ifdefs, replaced with following version
     using separate ELT and non-elt routines with a shared subroutine
#if defined(IS_ELT)
  public InvariantStatus add_modified(INT[] a, int count) {
    InvariantStatus status = InvariantStatus.NO_CHANGE;
  OUTER:
   for (int ai=0; ai<a.length; ai++) {
    INT v = a[ai];
#else
  public InvariantStatus add_modified(INT v, int count) {
    InvariantStatus status = InvariantStatus.NO_CHANGE;
  #if !(defined(SCALAR) || defined(FLOAT))
    Assert.assertTrue(Intern.isInterned(v));
#endif
#endif
    for (int i=0; i<num_elts; i++) {
      //if (logDetail())
      //  log ("add_modified (" + v + ")");
      if (EQUALS (elts[i], v)) {
#if defined(IS_ELT)
        continue OUTER;
#else
        return InvariantStatus.NO_CHANGE;
#endif
      }
    }
    if (num_elts == dkconfig_size) {
      if (logOn() || debug.isLoggable(Level.FINE))
        log (debug, "destroy of '" + format() + "' add_modified (" + v + ")");
      destroyAndFlow();
      return;
    }
#if defined(STRING) || defined(ELTSTRING)
    if (is_type() && (num_elts == 1)) {
      destroyAndFlow();
      return;
    }
#elif defined(SEQUENCE)
    if (is_hashcode() && (num_elts == 1)) {
      destroyAndFlow();
      return;
    }
#elif defined(SCALAR) || defined(ELT)
    if ((is_boolean() && (num_elts == 1))
        || (is_hashcode() && (num_elts == 2))) {
      destroyAndFlow();
      return;
    }

    if (is_hashcode() && (num_elts == 1)) {
      // Permit two object values only if one of them is null
      if ((elts[0] != 0) && (v != 0)) {
        destroyAndFlow();
        return;
      }
    }
#endif
    // We are significantly changing our state (not just zeroing in on
    // a constant), so we have to flow a copy before we do so.  We even
    // need to clone if this has 0 elements becuase otherwise, lower
    // ppts will get versions of this with multiple elements once this is
    // expanded.
    cloneAndFlow();

    elts[num_elts] = v;
    num_elts++;
    status = InvariantStatus.WEAKENED;
#if defined(IS_ELT)
   }
#endif
  return status;
#if 0
  This duplication is just to make all the close braces in the file line up.
#endif
#if defined(IS_ELT)
  }
#else
  }
#endif
  */

#if defined(IS_ELT)

  public InvariantStatus add_modified(INT[] a, int count) {
    return runValue(a, count, true);
  }

  public InvariantStatus check_modified(INT[] a, int count) {
    return runValue(a, count, false);
  }

#else

  public InvariantStatus add_modified(INT a, int count) {
    return runValue(a, count, true);
  }

  public InvariantStatus check_modified(INT a, int count) {
    return runValue(a, count, false);
  }

#endif

#if defined(IS_ELT)

  private InvariantStatus runValue(INT[] a, int count, boolean mutate) {
    InvariantStatus finalStatus = InvariantStatus.NO_CHANGE;
    for (int ai=0; ai <a.length; ai++) {
      InvariantStatus status = null;
      if (mutate) {
        status = add_mod_elem(a[ai], count);
      } else {
        status = check_mod_elem(a[ai], count);
      }
      if (status == InvariantStatus.FALSIFIED) {
        return InvariantStatus.FALSIFIED;
      } else if (status == InvariantStatus.WEAKENED) {
        finalStatus = InvariantStatus.WEAKENED;
      }
    }
    return finalStatus;
  }

#else

  private InvariantStatus runValue(INT v, int count, boolean mutate) {
    InvariantStatus status;
    if (mutate) {
      status = add_mod_elem(v, count);
    } else {
      status = check_mod_elem(v, count);
    }
    if (status == InvariantStatus.FALSIFIED) {
      if (logOn() && mutate) {
        StringBuffer eltString = new StringBuffer();
        for (int i = 0; i < num_elts; i++) {
          eltString.append(TOSTRING (elts[i]) + " ");
        }
        log ("destroyed on sample " + TOSTRING (v) + " previous vals = { "
             + eltString + "} num_elts = " + num_elts);
      }
      return InvariantStatus.FALSIFIED;
    }
    return status;
  }
#endif


  /**
   * Adds a single sample to the invariant.  Returns
   * the appropriate InvariantStatus from the result
   * of adding the sample to this.
   */
  public InvariantStatus add_mod_elem (INT v, int count) {
    InvariantStatus status = check_mod_elem(v, count);
    if (status == InvariantStatus.WEAKENED) {
      elts[num_elts] = v;
      num_elts++;
    }
    return status;
  }


  /**
   * Checks a single sample to the invariant.  Returns
   * the appropriate InvariantStatus from the result
   * of adding the sample to this.
   */
  public InvariantStatus check_mod_elem (INT v, int count) {

    // Look for v in our list of previously seen values.  If it's
    // found, we're all set.
    for (int i=0; i<num_elts; i++) {
      //if (logDetail())
      //  log ("add_modified (" + v + ")");
      if (EQUALS (elts[i], v)) {
        return (InvariantStatus.NO_CHANGE);
      }
    }

    if (num_elts == dkconfig_size) {
      return (InvariantStatus.FALSIFIED);
    }

#if defined(STRING) || defined(ELTSTRING)
    if (is_type() && (num_elts == 1)) {
      return (InvariantStatus.FALSIFIED);
    }
#elif defined(SEQUENCE)
    if (is_hashcode() && (num_elts == 1)) {
      return (InvariantStatus.FALSIFIED);
    }
#elif defined(SCALAR) || defined(ELT)
    if ((is_boolean() && (num_elts == 1)) || (is_hashcode() && (num_elts == 2))) {
      return (InvariantStatus.FALSIFIED);
    }

    if (is_hashcode() && (num_elts == 1)) {
      // Permit two object values only if one of them is null
      if ((elts[0] != 0) && (v != 0)) {
        return (InvariantStatus.FALSIFIED);
      }
    }
#endif


    return (InvariantStatus.WEAKENED);
  }

#if defined(IS_ELT)
  // It is possible to have seen many (array) samples, but no (INT)
  // array element values.
  public boolean enoughSamples() {
    return num_elts > 0;
  }
#endif

  protected double computeConfidence() {
    // This is not ideal.
    if (num_elts == 0) {
      return Invariant.CONFIDENCE_UNJUSTIFIED;
#if defined(SCALAR) || defined(ELT)
    } else if (is_hashcode() && (num_elts > 1)) {
      // This should never happen
      return Invariant.CONFIDENCE_UNJUSTIFIED;
#endif
    } else {
      return Invariant.CONFIDENCE_JUSTIFIED;
    }
  }

  public DiscardInfo isObviousStatically(VarInfo[] vis) {
    // Static constants are necessarily OneOf precisely one value.
    // This removes static constants from the output, which might not be
    // desirable if the user doesn't know their actual value.
    if (vis[0].isStaticConstant()) {
      Assert.assertTrue(num_elts <= 1);
      return new DiscardInfo(this, DiscardCode.obvious, vis[0].name.name() + " is a static constant.");
    }
    return super.isObviousStatically(vis);
  }

#if defined(IS_NUMERIC)
  public DiscardInfo isObviousDynamically(VarInfo[] vis) {
    DiscardInfo super_result = super.isObviousDynamically(vis);
    if (super_result != null) {
      return super_result;
    }

    VarInfo v = vis[0];

    Debug dlog = new Debug (getClass(), ppt, vis);

    if (logOn())
      dlog.log ("enter isObviousDynamically");

    // Obvious if we are 'size(array) == 0'  The thinking is that this
    // will also always show up as 'array == []' which is a little more
    // illuminating.  At this point we insist that we are a SequenceLength
    // derivation of a base (underived) array.  Its quite possible this should
    // just apply to all arrays.
    if (v.isDerived() && (v.derived instanceof SequenceLength)
      && (num_elts == 1) && (elts[0] == 0)) {
      VarInfo[] bv = v.derived.getBases();
      if (!bv[0].isDerived()) {
        if (logOn())
          dlog.log ("isObviousDynamically '" + v.name.name()
                    + " == 0' ==> '" + bv[0].name.name() + " == []'");
        return new DiscardInfo(this, DiscardCode.obvious, "size(array) == 0 is implied by array == []");
      }
    }

    if (v.isDerived() && (v.derived instanceof SequenceLength)) {
      SequenceLength sl = (SequenceLength) v.derived;
      if (sl.shift != 0) {
        String discardString = v.name.name() + " is derived with shift!=0 (shift==" + sl.shift + ")";
        return new DiscardInfo(this, DiscardCode.obvious, discardString);
      }
    }

    // For every ELTONEOF at this program point, see if this variable is
    // an obvious member of that sequence.
    PptTopLevel parent = ppt.parent;
    for (Iterator<Invariant> itor = parent.invariants_iterator(); itor.hasNext(); ) {
      Invariant inv = itor.next();
      if ((inv instanceof ELTONEOF) && inv.enoughSamples()) {
        VarInfo v1 = var();
        VarInfo v2 = inv.ppt.var_infos[0];
        // System.out.println("isObviousImplied: calling  Member.isObviousMember(" + v1.name + ", " + v2.name + ")");
        // Don't use isEqualToObviousMember:  that is too subtle
        // and eliminates desirable invariants such as "return == null".
        if (Member.isObviousMember(v1, v2)) {
          ELTONEOF other = (ELTONEOF) inv;
          if (num_elts == other.num_elts()) {
            sort_rep();
            if (other.compare_rep(num_elts, elts)) {
              // System.out.println("isObviousImplied true");
              String discardString = v1.name.name()+" is a member of "+v2.name.name()+" for which this Invariant also holds";
              return new DiscardInfo(this, DiscardCode.obvious, discardString);
            }
          }
        }
      }
    }

    return null;
  }
#elif defined(IS_ELT_NUMERIC)
  public DiscardInfo isObviousDynamically(VarInfo[] vis) {
    DiscardInfo super_result = super.isObviousDynamically(vis);
    if (super_result != null) {
      return super_result;
    }

    VarInfo v = vis[0];
    // Look for the same property over a supersequence of this one.
    PptTopLevel pptt = ppt.parent;
    for (Iterator<Invariant> inv_itor = pptt.invariants_iterator(); inv_itor.hasNext(); ) {
      Invariant inv = inv_itor.next();
      if (inv == this) {
        continue;
      }
      if (inv instanceof ONEOFSCALAR) {
        ONEOFSCALAR other = (ONEOFSCALAR) inv;
        if (isSameFormula(other)
          && SubSequence.isObviousSubSequenceDynamically(this, v, other.var())) {
          debug.fine ("isObviousDyn: Returning true because isObviousSubSequenceDynamically");
          return new DiscardInfo(this, DiscardCode.obvious, "The same property holds over a supersequence " + other.var().name());
        }
      }
    }

    return null;
  }

#endif

  /**
   * Oneof can merge different formulas from lower points to create a single
   * formula at an upper point.
   */
  public boolean mergeFormulasOk() {
    return (true);
  }

  public boolean isSameFormula(Invariant o) {
    ONEOFSCALAR other = (ONEOFSCALAR) o;
    if (num_elts != other.num_elts)
      return false;
    if (num_elts == 0 && other.num_elts == 0)
      return true;

    sort_rep();
    other.sort_rep();

#if defined(SCALAR) || defined(ELT)
    // All nonzero hashcode values should be considered equal to each other
    //
    // Examples:
    // inv1  inv2  result
    // ----  ----  ------
    // 19    0     false
    // 19    22    true
    // 0     0     true

    if (is_hashcode() && other.is_hashcode()) {
      if (num_elts == 1 && other.num_elts == 1) {
        return ((elts[0] == 0 && other.elts[0] == 0) ||
                (elts[0] != 0 && other.elts[0] != 0));
      } else if (num_elts == 2 && other.num_elts == 2) {
        // add_modified allows two elements iff one is null
        Assert.assertTrue(elts[0] == 0);
        Assert.assertTrue(other.elts[0] == 0);
        Assert.assertTrue(elts[1] != 0);
        Assert.assertTrue(other.elts[1] != 0);

        // Since we know the first elements of each invariant are
        // zero, and the second elements are nonzero, we can immediately
        // return true
        return true;
      } else {
        return false;
      }
    }
#elif defined(SEQUENCE)
    // All nonzero hashcode values should be considered equal to each other
    //
    // Examples:
    // inv1     inv2     result
    // -------  -------  ------
    // {19,23}  {91,0}   false
    // {19,23}  {91,32}  true
    // {19,0}   {91,0}   true
    // {0,0}    {0,0}    true

    if (is_hashcode() && other.is_hashcode()) {
      // we only have one value, because add_modified dies if more
      Assert.assertTrue(num_elts == 1 && other.num_elts == 1);

      INT thisSeq = elts[0];
      INT otherSeq = other.elts[0];
      if (thisSeq.length != otherSeq.length) {
        return false;
      }

      for (int i=0; i < thisSeq.length; i++) {
        if ((thisSeq[i] == 0 && otherSeq[i] != 0) ||
            (thisSeq[i] != 0 && otherSeq[i] == 0)) {
          return false;
        }
      }

      return true;
    }
#endif

    for (int i=0; i < num_elts; i++) {
      if (! EQUALS(elts[i],other.elts[i]))
        return false;
    }

    return true;
  }

  public boolean isExclusiveFormula(Invariant o) {
    if (o instanceof ONEOFSCALAR) {
      ONEOFSCALAR other = (ONEOFSCALAR) o;

      if (num_elts == 0 || other.num_elts == 0)
        return false;
      for (int i=0; i < num_elts; i++) {
        for (int j=0; j < other.num_elts; j++) {
          if (EQUALS(elts[i],other.elts[j])) // elements are interned
            return false;
        }
      }
#if defined(SCALAR) || defined(ELT)
      // Don't consider two instances of "non-null" as exclusive.
      if (is_hashcode() && num_elts == 1
          && other.is_hashcode() && other.num_elts == 1
          && elts[0] != 0 && other.elts[0] != 0) {
        return false;
      }
#endif

#ifdef BASE_INT
      // Be even more aggressive about rejecting these for use in
      // implications in this case, since, we'd be printing them as
      // "true"
      if (dkconfig_omit_hashcode_values_Simplify &&
          (is_hashcode() || other.is_hashcode())) {
        return false;
      }
#endif

      return true;
    }
#if defined(IS_NUMERIC) || defined(IS_ELT_NUMERIC)
    // Many more checks can be added here:  against nonzero, modulus, etc.
    if ((o instanceof NONZERO) && (num_elts == 1) && (elts[0] == 0)) {
      return true;
    }
    INT elts_min = NUMWRAPPER.MAX_VALUE;
    INT elts_max = NUMWRAPPER.MIN_VALUE;
    for (int i=0; i < num_elts; i++) {
      elts_min = Math.min(elts_min, elts[i]);
      elts_max = Math.max(elts_max, elts[i]);
    }
    if ((o instanceof LOWERBOUND) && (elts_max < ((LOWERBOUND)o).min()))
      return true;
    if ((o instanceof UPPERBOUND) && (elts_min > ((UPPERBOUND)o).max()))
      return true;
#endif

    return false;
  }

  // OneOf invariants that indicate a small set of possible values are
  // uninteresting.  OneOf invariants that indicate exactly one value
  // are interesting.
  public boolean isInteresting() {
    if (num_elts() > 1) {
      return false;
    } else {
      return true;
    }
  }

  public boolean hasUninterestingConstant() {
#if defined(SCALAR) || defined(ELT)
    for (int i = 0; i < num_elts; i++) {
      if (elts[i] < -1 || elts[i] > 2)
        return true;
    }
#elif defined(FLOAT) || defined(ELTFLOAT)
    for (int i = 0; i < num_elts; i++) {
      if (elts[i] < -1.0 || elts[i] > 2.0 || elts[i] != (long)elts[i])
        return true;
    }
#elif defined(SEQUENCE)
    for (int i = 0; i < num_elts; i++) {
      for (int j = 0; j < elts[i].length; j++)
        if (elts[i][j] < -1 || elts[i][j] > 2)
          return true;
    }
#elif defined(SEQUENCEFLOAT)
    for (int i = 0; i < num_elts; i++) {
      for (int j = 0; j < elts[i].length; j++)
        if (elts[i][j] < -1.0 || elts[i][j] > 2.0
            || elts[i][j] != (long)elts[i][j])
          return true;
    }
#endif
    return false;
  }


  public boolean isExact() {
    return (num_elts == 1);
  }

  // Look up a previously instantiated invariant.
  public static ONEOFSCALAR find(PptSlice ppt) {
    Assert.assertTrue(ppt.arity() == 1);
    for (Iterator<Invariant> itor = ppt.invs.iterator(); itor.hasNext(); ) {
      Invariant inv = itor.next();
      if (inv instanceof ONEOFSCALAR)
        return (ONEOFSCALAR) inv;
    }
    return null;
  }

  // Interning is lost when an object is serialized and deserialized.
  // Manually re-intern any interned fields upon deserialization.
  private void readObject(ObjectInputStream in) throws IOException,
    ClassNotFoundException {
    in.defaultReadObject();
    #if defined (STRINGSEQUENCE)
      for (int i = 0; i < num_elts; i++) {
        for (int j = 0; j < elts[i].length; j++)
          elts[i][j] = Intern.intern (elts[i][j]);
      }
    #endif
    for (int i=0; i < num_elts; i++)
      elts[i] = Intern.intern(elts[i]);
  }

  /**
   * Merge the invariants in invs to form a new invariant.  Each must be
   * a ONEOFSCALAR invariant.  This code finds all of the oneof values
   * from each of the invariants and returns the merged invariant (if any).
   *
   * @param invs       List of invariants to merge.  The invariants must all be
   *                   of the same type and should come from the children of
   *                   parent_ppt.  They should also all be permuted to match
   *                   the variable order in parent_ppt.
   * @param parent_ppt Slice that will contain the new invariant
   */
  public Invariant merge (List<Invariant> invs, PptSlice parent_ppt) {

    // Create the initial parent invariant from the first child
    ONEOFSCALAR  first = (ONEOFSCALAR) invs.get(0);
    ONEOFSCALAR result = (ONEOFSCALAR) first.clone();
    result.ppt = parent_ppt;
    #if defined (IS_SEQUENCE)
      for (int i = 0; i < result.num_elts; i++)
        result.elts[i] = Intern.intern (result.elts[i]);
    #endif

    // Loop through the rest of the child invariants
    for (int i = 1; i < invs.size(); i++ ) {

      // Get this invariant
      ONEOFSCALAR inv = (ONEOFSCALAR) invs.get (i);

      // Loop through each distinct value found in this child and add
      // it to the parent.  If the invariant is falsified, there is no parent
      // invariant
      for (int j = 0; j < inv.num_elts; j++) {
        INT val = inv.elts[j];
        #if defined (IS_SEQUENCE)
        val = Intern.intern (val);
        #endif
        InvariantStatus status = result.add_mod_elem(val, 1);
        if (status == InvariantStatus.FALSIFIED) {
          result.log ("child value '" + val + "' destroyed oneof");
          return (null);
        }
      }
    }

    result.log ("Merged '" + result.format() + "' from " + invs.size()
                + " child invariants");
    return (result);
  }

  /**
   * Setup the invariant with the specified elements.  Normally
   * used when searching for a specified OneOf
   */
  public void set_one_of_val (INT[] vals) {

    num_elts = vals.length;
    for (int i = 0; i < num_elts; i++)
      elts[i] = Intern.intern (vals[i]);
  }

  /**
   * Returns true if every element in this invariant is contained in
   * the specified state.  For example if x = 1 and the state contains
   * 1 and 2, true will be returned.
   */
  public boolean state_match (Object state) {

    if (num_elts == 0)
      return (false);

    if (!(state instanceof INT[]))
      System.out.println ("state is of class '" + state.getClass().getName()
                          + "'");
    INT[] e = (INT[]) state;
    for (int i = 0; i < num_elts; i++) {
      boolean match = false;
      for (int j = 0; j < e.length; j++) {
        if (elts[i] == e[j]) {
          match = true;
          break;
        }
      }
      if (!match)
        return (false);
    }
    return (true);
  }

}
